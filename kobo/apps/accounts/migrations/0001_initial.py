# Generated by Django 3.2.15 on 2022-10-07 16:43

import django.db.models.deletion
from django.core.paginator import Paginator
from django.db import migrations, models


def migrate_email_and_extra_user_detail(apps, schema_editor):
    User = apps.get_model('kobo_auth', 'User')
    ImportedVerification = apps.get_model('accounts', 'ImportedVerification')
    EmailAddress = apps.get_model('account', 'EmailAddress')
    ExtraUserDetail = apps.get_model('hub', 'ExtraUserDetail')

    # Efficient bulk data mover - 3 queries per many users
    page_size = 10000
    paginator = Paginator(
        User.objects.exclude(email='').order_by('pk'), page_size
    )
    for page in paginator.page_range:
        users = paginator.page(page).object_list
        emails = EmailAddress.objects.bulk_create(
            [
                EmailAddress(
                    user=user, email=user.email, verified=True, primary=True
                )
                for user in users
            ],
            ignore_conflicts=True,
        )
        try:
            ImportedVerification.objects.bulk_create(
                [ImportedVerification(email=email) for email in emails],
            )
        # Necessary when EmailAddress bulk_create contains conflicts
        # This only happens when migrating backwards and forwards again
        # because the previous email may not exist (as it was itself a conflict)
        except ValueError:
            pass

    paginator = Paginator(
        ExtraUserDetail.objects.exclude(data={}).order_by('pk'), page_size
    )
    for page in paginator.page_range:
        user_details = paginator.page(page).object_list
        for user_detail in user_details:
            for key in ['gender', 'sector']:
                if (
                    key in user_detail.data
                    and type(user_detail.data[key]) is dict
                ):
                    user_detail.data[key] = user_detail.data[key].get('value')
            # Unnest array with possible value
            key = 'country'
            if (
                key in user_detail.data
                and user_detail.data[key]
                and type(user_detail.data[key]) is list
            ):
                user_detail.data[key] = user_detail.data[key][0]
                if type(user_detail.data[key]) is dict:
                    user_detail.data[key] = user_detail.data[key].get('value')
        ExtraUserDetail.objects.bulk_update(user_details, ['data'])


def noop(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0002_email_max_length'),
        ('hub', '0003_auto_20160318_1808'),
    ]

    operations = [
        migrations.CreateModel(
            name='ImportedVerification',
            fields=[
                (
                    'email',
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name='+',
                        serialize=False,
                        to='account.emailaddress',
                    ),
                ),
            ],
        ),
        migrations.RunPython(migrate_email_and_extra_user_detail, noop),
    ]
