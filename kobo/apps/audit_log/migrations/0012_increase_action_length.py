# flake8: noqa: E501
# Generated by Django 4.2.15 on 2024-10-23 15:07

from django.conf import settings
from django.db import migrations, connection


def _get_default_action_indexes_def() -> list[str]:
    """
    Return default action_indexes definition generated by Django on
    a fresh installation.
    """
    return [
        "CREATE INDEX audit_log_auditlog_action_1c3be41c ON public.audit_log_auditlog USING btree (action)",
        "CREATE INDEX audit_log_auditlog_action_1c3be41c_like ON public.audit_log_auditlog USING btree (action varchar_pattern_ops)",
        "CREATE INDEX audit_log_a_app_lab_330cca_idx ON public.audit_log_auditlog USING btree (app_label, model_name, action)",
        "CREATE INDEX audit_log_asset_action_idx ON public.audit_log_auditlog USING btree (((metadata -> 'asset_uid'::text)), action)",
    ]


def alter_audit_log_action_length(apps, schema_editor):

    with connection.cursor() as cursor:
        cursor.execute(
            """
            SELECT indexname, indexdef
            FROM pg_indexes
            WHERE schemaname = 'public' AND tablename = 'audit_log_auditlog'
            AND indexdef LIKE '%action%';
        """
        )
        indexes = cursor.fetchall()
        queries = []
        index_defs = []

        for (index_name, index_def) in indexes:
            queries.append(
                f'DROP INDEX IF EXISTS "{index_name}"'
            )
            index_defs.append(index_def)

        # Index definitions are not expected to be empty, but this may occur when
        # toggling between different `SKIP_HEAVY_MIGRATIONS` values during migration
        # application and rollback.
        if not index_defs:
            index_defs = _get_default_action_indexes_def()

        queries.append(
            'ALTER TABLE audit_log_auditlog ALTER COLUMN "action" TYPE varchar(60)'
        )

        if settings.SKIP_HEAVY_MIGRATIONS:
            create_index_queries = ';\n'.join(index_defs).replace(
                'CREATE INDEX', 'CREATE INDEX CONCURRENTLY'
            )
            print(
                "\n\n⚠️ ATTENTION ⚠️\n"
                "Run the SQL queries below in PostgreSQL directly:\n\n"
                + f'{create_index_queries};\n'
            )
        else:
            print(
                "\n\n⚠️ ATTENTION ⚠️\n"
                "This migration might take a while.If it is too slow, you may want to "
                "re-run migrations with\nSKIP_HEAVY_MIGRATIONS=True and apply this one "
                "manually from the django shell.\n"
            )
            queries += index_defs

        queries_str = ';\n'.join(queries) + ';'

        cursor.execute(queries_str)


class Migration(migrations.Migration):

    dependencies = [
        ('audit_log', '0011_projecthistorylog'),
    ]

    operations = [
        migrations.RunPython(alter_audit_log_action_length, migrations.RunPython.noop),
    ]
