# Generated by Django 4.2.15 on 2025-03-12 14:37
from collections import defaultdict

from django.conf import settings
from django.db.models import Q
from django.db.models.query import QuerySet
from pymongo import UpdateOne

from kobo.apps.openrosa.apps.logger.models.attachment import (
    Attachment,
    AttachmentDeleteStatus,
)
from kpi.fields.kpi_uid import KpiUidField

CHUNK_SIZE = 2000


def run():
    """
    Backfills xform_id, user_id, uid, date_created, and date_modified for Attachment
    model and `attachments.uid` in MongoDB
    """
    stop = False
    attachment_pk = 0

    while not stop:
        if attachments := get_queryset(attachment_pk):
            attachment_ids_per_instance = defaultdict(dict)
            for attachment in attachments:
                instance = attachment.instance

                attachment.xform_id = instance.xform_id
                attachment.user_id = instance.xform.user_id
                attachment_pk = attachment.pk

                if not attachment.uid:
                    attachment.uid = KpiUidField.generate_unique_id('att')
                attachment_ids_per_instance[instance.pk][attachment.pk] = attachment.uid

                if not attachment.date_created:
                    attachment.date_created = instance.date_created

                if not attachment.date_modified:
                    attachment.date_modified = attachment.date_created

                if attachment.deleted_at and not attachment.delete_status:
                    attachment.date_modified = attachment.deleted_at
                    attachment.delete_status = AttachmentDeleteStatus.SOFT_DELETED

            update_mongo(attachment_ids_per_instance)

            Attachment.all_objects.bulk_update(
                attachments,
                fields=[
                    'xform_id',
                    'user_id',
                    'uid',
                    'date_created',
                    'date_modified',
                    'delete_status',
                ],
            )
        else:
            stop = True


def get_queryset(attachment_pk: int) -> QuerySet[Attachment]:
    return (
        Attachment.all_objects.select_related('instance__xform')
        .only(
            'id',
            'uid',
            'deleted_at',
            'delete_status',
            'date_created',
            'date_modified',
            'instance_id',
            'instance__xform_id',
            'instance__xform__user_id',
            'instance__date_created'
        )
        .filter(
            Q(date_created__isnull=True) | Q(date_modified__isnull=True),
            pk__gt=attachment_pk,
        )
        .order_by('pk')[:CHUNK_SIZE]
    )


def update_mongo(attachment_ids_per_instance: dict):
    """
    Update MongoDB documents in batches
    """

    if not attachment_ids_per_instance:
        return

    collection = settings.MONGO_DB.instances

    documents = collection.find(
        {'_id': {'$in': list(attachment_ids_per_instance)}},
        {'_id': 1, '_attachments': 1},
    )

    updates = []

    for doc in documents:
        updated_attachments = []

        for attachment in doc['_attachments']:

            if (
                'uid' not in attachment
                and attachment['id'] in attachment_ids_per_instance[doc['_id']]
            ):
                attachment['uid'] = attachment_ids_per_instance[doc['_id']][
                    attachment['id']
                ]
                updated_attachments.append(attachment)

        if updated_attachments:
            updates.append(
                UpdateOne(
                    {'_id': doc['_id']},
                    {'$set': {'_attachments': updated_attachments}},
                )
            )

    if updates:
        collection.bulk_write(updates)
