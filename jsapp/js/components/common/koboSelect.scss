@use 'scss/colors';
@use 'scss/mixins';
@use 'js/components/common/button';
@use 'js/components/common/textBox.module';

$k-select-option-height: 36px;
$k-select-menu-padding: 6px;

.k-select {
  font-size: 12px;

  .kobo-dropdown__menu {
    width: 100%;
  }
}

// Focus styles for the trigger. The element getting actual focus here is the
// trigger from KoboDropdown, so we need this long selector
.k-select .kobo-dropdown__trigger:focus-visible .k-select__trigger {
  @include mixins.default-ui-focus;
}
// And we need to remove the default styles from the de facto trigger
.k-select .kobo-dropdown__trigger:focus-visible {
  outline: none;
}

.k-select__trigger {
  @include mixins.centerRowFlex;
  justify-content: space-between;
  font-weight: 400;
  text-align: initial;
  border-width: button.$button-border-width;
  border-style: solid;
  border-color: transparent;
  border-radius: button.$button-border-radius;
  background-color: transparent;
  color: colors.$kobo-gray-700;
  position: relative; // Needed for pending state.
  padding: 0 16px;

  .k-select__search-box,
  .k-select__trigger-selected-option {
    flex: 1;
  }
}

.k-select__trigger,
.k-select__trigger-selected-option,
.k-select__option {
  > *:not(:last-child) {
    margin-right: 6px;
  }
}

// Styles for when menu is opened.
.k-select .kobo-dropdown--menu-visible .k-select__trigger {
  color: colors.$kobo-gray-800;
}

.k-select__clear {
  @include mixins.centerRowFlex;
}

.k-select__search-box,
.k-select__trigger-selected-option {
  @include mixins.centerRowFlex;

  min-width: 0; // HACKFIX for flex
}

.k-select__trigger-selected-option:not(.k-select__trigger-selected-option--empty) label {
  color: colors.$kobo-gray-800;
}

.k-select__menu {
  display: block;
  width: 100%;
  // We want to show four options at a time, with half of the next one visible
  // to suggest that there are more options.
  max-height: ($k-select-option-height * 4.5) + $k-select-menu-padding;
  overflow-x: auto;
  margin: 2px 0 0;
  padding: $k-select-menu-padding ($k-select-menu-padding * 0.5);
  border-radius: button.$button-border-radius;
  background-color: colors.$kobo-white;
  box-shadow: 0 0 6px rgba(colors.$kobo-storm, 0.3);
}

.k-select__option {
  @include mixins.buttonReset;
  font-weight: 400;
  position: relative;

  &:hover,
  &.k-select__option--selected {
    color: colors.$kobo-gray-800;
    background-color: colors.$kobo-gray-200;
  }

  &:focus-visible {
    @include mixins.default-ui-focus;
    // Needed so that option--selected never appears above focus styles
    z-index: 1;
  }

  .k-icon {
    color: inherit;
  }
}

.k-select__option,
.k-select__menu-message {
  @include mixins.centerRowFlex;
  justify-content: space-between;
  width: 100%;
  height: $k-select-option-height;
  color: colors.$kobo-gray-700;
  padding: 0 #{16px - 2px};
  text-align: initial;
}

.k-select__menu-message {
  font-style: italic;
  margin: 0;
}

.k-select__error {
  font-size: 12px;
  line-height: 1.6;
  font-weight: 400;
  font-style: normal;
  color: colors.$kobo-red;
  margin: 6px auto 0;
}

.k-select.k-select--has-error {
  &.k-select--type-outline {
    .k-select__trigger {
      border-color: colors.$kobo-mid-red;
    }
  }

  &.k-select--type-blue,
  &.k-select--type-gray {
    .k-select__trigger {
      background-color: colors.$kobo-light-red;
    }
  }
}

.k-select__option label,
.k-select__trigger label {
  @include mixins.textEllipsis;
  cursor: inherit;
  flex: 1;
}

.k-select__search-box {
  background-color: transparent;
  border: 0;
  padding: 0;
  font-size: 14px;

  &:focus-visible {
    // wrapper element is handling that
    outline: none;
  }

  &::placeholder {
    @include mixins.textEllipsis;
    color: inherit;
    opacity: 1;
  }
}

// When menu is opened and searchable, we replace the trigger with text input.
.k-select.k-select--is-searchable.k-select--is-menu-visible {
  // We need it to disappear, but also to be still a child node for the opening
  // functionality to work.
  .k-select__trigger-selected-option {
    visibility: hidden;
    opacity: 0;
    position: absolute;
  }
}

// The component always takes all the available space.
.k-select {
  width: 100%;

  .kobo-dropdown,
  .kobo-dropdown__trigger {
    width: 100%;
  }
}

.k-select.k-select--is-pending {
  .kobo-dropdown__trigger {
    pointer-events: none;
  }

  // Note: this assumes a `spinner` icon is present inside the button (already
  // handled by `koboSelect.tsx` code).
  .k-select__trigger {
    // Hide button text.
    color: transparent !important;

    .k-select__clear .k-icon,
    .k-icon.k-icon-caret-down,
    .k-icon.k-icon-caret-up,
    .k-select__trigger-selected-option label,
    .k-select__trigger-selected-option .k-icon {
      color: transparent !important;
    }

    // Disable any interactions (and hover effects).
    pointer-events: none;

    .k-icon.k-icon-spinner {
      display: block;
      position: absolute;
      line-height: 1;
    }
  }

  .k-select__menu {
    pointer-events: none;
    opacity: 0.5;
  }
}

.k-select.k-select--type-blue,
.k-select.k-select--type-gray {
  &.k-select--is-menu-visible {
    .k-select__trigger {
      border-color: colors.$kobo-mid-blue;

      &:focus-within {
        @include mixins.default-ui-focus;
      }

      .k-icon.k-icon-caret-down,
      .k-icon.k-icon-caret-up {
        color: colors.$kobo-blue;
      }
    }
  }

  .k-select__trigger .k-icon {
    color: colors.$kobo-gray-500;
  }
}

.k-select.k-select--type-blue {
  .k-select__trigger {
    background-color: colors.$kobo-bg-blue;
  }

  &:not(.k-select--is-menu-visible) .k-select__trigger:hover,
  &.k-select--is-pending .k-select__trigger {
    color: colors.$kobo-gray-800;
    background-color: darken(colors.$kobo-bg-blue, 2);
  }
}

.k-select.k-select--type-gray {
  .k-select__trigger {
    background-color: colors.$kobo-light-storm;
  }

  &:not(.k-select--is-menu-visible) .k-select__trigger:hover,
  &.k-select--is-pending .k-select__trigger {
    color: colors.$kobo-gray-800;
    background-color: darken(colors.$kobo-light-storm, 2);
  }
}

.k-select.k-select--type-outline {
  .k-select__trigger {
    border-color: colors.$kobo-gray-300;
    background-color: colors.$kobo-white;
  }

  &:not(.k-select--is-menu-visible) .k-select__trigger:hover,
  &.k-select--is-pending .k-select__trigger {
    border-color: colors.$kobo-gray-400;
    color: colors.$kobo-gray-800;
  }

  &.k-select--is-menu-visible {
    .k-select__trigger {
      border-color: colors.$kobo-blue;

      &:focus-within {
        @include mixins.default-ui-focus;
      }

      .k-icon.k-icon-caret-down,
      .k-icon.k-icon-caret-up {
        color: colors.$kobo-blue;
      }
    }
  }

  .k-select__trigger .k-icon {
    color: colors.$kobo-gray-400;
  }
}

// This needs to have stronger specificity because of `.form-modal__item`
.k-select label.k-select__label {
  color: colors.$kobo-gray-800;
  font-size: 12px;
  line-height: textBox.$label-leading;
  margin-bottom: textBox.$label-margin;
}

.k-select__required-mark {
  // NOTE: copied from textBox.module.scss
  // Smaller than the design, because there is also a single whitespace
  // character between the label and this mark
  margin-left: 2px;
  color: colors.$kobo-mid-red;
  font-size: 14px;
  // Magic number to align it similarly to Figma designs
  line-height: 16px;
  display: inline-block;
  vertical-align: bottom;
}

// Sets the different sizes for given size of a trigger button.
@mixin triggerSize($height, $font, $icon) {
  min-height: $height;
  line-height: $height - 2 * button.$button-border-width; // Subtracting the border.
  font-size: $font;

  // Position the spinner icon in the center;
  .k-icon.k-icon-spinner.k-spin {
    top: calc(50% - #{$icon * 0.5});
    left: calc(50% - #{$icon * 0.5});
  }
}

.k-select--size-s .k-select__trigger {
  @include triggerSize(
    button.$button-height-s,
    button.$button-font-s,
    button.$button-icon-s
  );
}

.k-select--size-m .k-select__trigger {
  @include triggerSize(
    button.$button-height-m,
    button.$button-font-m,
    button.$button-icon-m
  );
}

.k-select--size-l .k-select__trigger {
  @include triggerSize(
    button.$button-height-l,
    button.$button-font-l,
    button.$button-icon-l
  );
}
