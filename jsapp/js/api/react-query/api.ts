/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { ChangePlan } from '../models/changePlan'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Change an existing subscription to a new price.

This will immediately change their subscription to the new plan if upgrading, prorating the charge.
If the user is downgrading to a lower price, it will schedule the change at the end of the current billing period.

<pre class="prettyprint">
<b>GET</b> /api/v2/stripe/change-plan/?subscription_id=<code>{subscription_id}</code>&price_id=<code>{price_id}</code>
</pre>

> Example
>
>       curl -X GET https://[kpi]/api/v2/stripe/change-plan/

> **Payload**
>
>        {
>           "price_id": "price_A34cds8fmske3tf",
>           "subscription_id": "sub_s9aNFrd2fsmld4gz",
>           "quantity": 100000
>        }

where:

* "price_id" (required) is the Stripe Price ID for the plan the user is changing to.
* "quantity" is the quantity for the new subscription price (default: 1).
* "subscription_id" (required) is a Stripe Subscription ID for the subscription being changed.
 */
export type stripeChangePlanRetrieveResponse200 = {
  data: ChangePlan
  status: 200
}

export type stripeChangePlanRetrieveResponseComposite = stripeChangePlanRetrieveResponse200

export type stripeChangePlanRetrieveResponse = stripeChangePlanRetrieveResponseComposite & {
  headers: Headers
}

export const getStripeChangePlanRetrieveUrl = () => {
  return `/api/v2/stripe/change-plan`
}

export const stripeChangePlanRetrieve = async (options?: RequestInit): Promise<stripeChangePlanRetrieveResponse> => {
  return fetchWithAuth<stripeChangePlanRetrieveResponse>(getStripeChangePlanRetrieveUrl(), {
    ...options,
    method: 'GET',
  })
}

export const getStripeChangePlanRetrieveQueryKey = () => {
  return ['api', 'v2', 'stripe', 'change-plan'] as const
}

export const getStripeChangePlanRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof stripeChangePlanRetrieve>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof stripeChangePlanRetrieve>>, TError, TData>
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStripeChangePlanRetrieveQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof stripeChangePlanRetrieve>>> = ({ signal }) =>
    stripeChangePlanRetrieve({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof stripeChangePlanRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type StripeChangePlanRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof stripeChangePlanRetrieve>>>
export type StripeChangePlanRetrieveQueryError = unknown

export function useStripeChangePlanRetrieve<
  TData = Awaited<ReturnType<typeof stripeChangePlanRetrieve>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof stripeChangePlanRetrieve>>, TError, TData>
  request?: SecondParameter<typeof fetchWithAuth>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getStripeChangePlanRetrieveQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
