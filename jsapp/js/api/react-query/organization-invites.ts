/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { InviteCreatePayload } from '../models/inviteCreatePayload'

import type { InviteCreateResponse } from '../models/inviteCreateResponse'

import type { InviteResponse } from '../models/inviteResponse'

import type { OrganizationsInvitesListParams } from '../models/organizationsInvitesListParams'

import type { PaginatedInviteResponseList } from '../models/paginatedInviteResponseList'

import type { PatchedInvitePatchPayload } from '../models/patchedInvitePatchPayload'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List organization invites

 */
export type organizationsInvitesListResponse200 = {
  data: PaginatedInviteResponseList
  status: 200
}

export type organizationsInvitesListResponse404 = {
  data: ErrorDetail
  status: 404
}

export type organizationsInvitesListResponseComposite =
  | organizationsInvitesListResponse200
  | organizationsInvitesListResponse404

export type organizationsInvitesListResponse = organizationsInvitesListResponseComposite & {
  headers: Headers
}

export const getOrganizationsInvitesListUrl = (organizationId: string, params?: OrganizationsInvitesListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/organizations/${organizationId}/invites/?${stringifiedParams}`
    : `/api/v2/organizations/${organizationId}/invites/`
}

export const organizationsInvitesList = async (
  organizationId: string,
  params?: OrganizationsInvitesListParams,
  options?: RequestInit,
): Promise<organizationsInvitesListResponse> => {
  return fetchWithAuth<organizationsInvitesListResponse>(getOrganizationsInvitesListUrl(organizationId, params), {
    ...options,
    method: 'GET',
  })
}

export const getOrganizationsInvitesListQueryKey = (
  organizationId: string,
  params?: OrganizationsInvitesListParams,
) => {
  return ['api', 'v2', 'organizations', organizationId, 'invites', ...(params ? [params] : [])] as const
}

export const getOrganizationsInvitesListQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationsInvitesList>>,
  TError = ErrorDetail,
>(
  organizationId: string,
  params?: OrganizationsInvitesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsInvitesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOrganizationsInvitesListQueryKey(organizationId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsInvitesList>>> = ({ signal }) =>
    organizationsInvitesList(organizationId, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!organizationId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationsInvitesList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type OrganizationsInvitesListQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsInvitesList>>>
export type OrganizationsInvitesListQueryError = ErrorDetail

export function useOrganizationsInvitesList<
  TData = Awaited<ReturnType<typeof organizationsInvitesList>>,
  TError = ErrorDetail,
>(
  organizationId: string,
  params?: OrganizationsInvitesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsInvitesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsInvitesListQueryOptions(organizationId, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Create Organization Invite

* Create organization invites for registered and unregistered users.
* Set the role for which the user is being invited -
(Choices: `member`, `admin`). Default is `member`.

 */
export type organizationsInvitesCreateResponse201 = {
  data: InviteCreateResponse
  status: 201
}

export type organizationsInvitesCreateResponse400 = {
  data: ErrorObject
  status: 400
}

export type organizationsInvitesCreateResponse404 = {
  data: ErrorDetail
  status: 404
}

export type organizationsInvitesCreateResponseComposite =
  | organizationsInvitesCreateResponse201
  | organizationsInvitesCreateResponse400
  | organizationsInvitesCreateResponse404

export type organizationsInvitesCreateResponse = organizationsInvitesCreateResponseComposite & {
  headers: Headers
}

export const getOrganizationsInvitesCreateUrl = (organizationId: string) => {
  return `/api/v2/organizations/${organizationId}/invites/`
}

export const organizationsInvitesCreate = async (
  organizationId: string,
  inviteCreatePayload: InviteCreatePayload,
  options?: RequestInit,
): Promise<organizationsInvitesCreateResponse> => {
  return fetchWithAuth<organizationsInvitesCreateResponse>(getOrganizationsInvitesCreateUrl(organizationId), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(inviteCreatePayload),
  })
}

export const getOrganizationsInvitesCreateMutationOptions = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsInvitesCreate>>,
    TError,
    { organizationId: string; data: InviteCreatePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizationsInvitesCreate>>,
  TError,
  { organizationId: string; data: InviteCreatePayload },
  TContext
> => {
  const mutationKey = ['organizationsInvitesCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizationsInvitesCreate>>,
    { organizationId: string; data: InviteCreatePayload }
  > = (props) => {
    const { organizationId, data } = props ?? {}

    return organizationsInvitesCreate(organizationId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsInvitesCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizationsInvitesCreate>>
>
export type OrganizationsInvitesCreateMutationBody = InviteCreatePayload
export type OrganizationsInvitesCreateMutationError = ErrorObject | ErrorDetail

export const useOrganizationsInvitesCreate = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsInvitesCreate>>,
    TError,
    { organizationId: string; data: InviteCreatePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getOrganizationsInvitesCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Retrieve organization invite

 */
export type organizationsInvitesRetrieveResponse200 = {
  data: InviteResponse
  status: 200
}

export type organizationsInvitesRetrieveResponse404 = {
  data: ErrorDetail
  status: 404
}

export type organizationsInvitesRetrieveResponseComposite =
  | organizationsInvitesRetrieveResponse200
  | organizationsInvitesRetrieveResponse404

export type organizationsInvitesRetrieveResponse = organizationsInvitesRetrieveResponseComposite & {
  headers: Headers
}

export const getOrganizationsInvitesRetrieveUrl = (organizationId: string, guid: string) => {
  return `/api/v2/organizations/${organizationId}/invites/${guid}/`
}

export const organizationsInvitesRetrieve = async (
  organizationId: string,
  guid: string,
  options?: RequestInit,
): Promise<organizationsInvitesRetrieveResponse> => {
  return fetchWithAuth<organizationsInvitesRetrieveResponse>(getOrganizationsInvitesRetrieveUrl(organizationId, guid), {
    ...options,
    method: 'GET',
  })
}

export const getOrganizationsInvitesRetrieveQueryKey = (organizationId: string, guid: string) => {
  return ['api', 'v2', 'organizations', organizationId, 'invites', guid] as const
}

export const getOrganizationsInvitesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationsInvitesRetrieve>>,
  TError = ErrorDetail,
>(
  organizationId: string,
  guid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsInvitesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOrganizationsInvitesRetrieveQueryKey(organizationId, guid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsInvitesRetrieve>>> = ({ signal }) =>
    organizationsInvitesRetrieve(organizationId, guid, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!(organizationId && guid), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationsInvitesRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type OrganizationsInvitesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof organizationsInvitesRetrieve>>
>
export type OrganizationsInvitesRetrieveQueryError = ErrorDetail

export function useOrganizationsInvitesRetrieve<
  TData = Awaited<ReturnType<typeof organizationsInvitesRetrieve>>,
  TError = ErrorDetail,
>(
  organizationId: string,
  guid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsInvitesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsInvitesRetrieveQueryOptions(organizationId, guid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Update Organization Invite

* Update an organization invite to accept, decline, cancel, expire, or resend.
* Update the role of the invitee to `admin` or `member`. Only the owner or admin can update the role.


 */
export type organizationsInvitesPartialUpdateResponse200 = {
  data: InviteResponse
  status: 200
}

export type organizationsInvitesPartialUpdateResponse400 = {
  data: ErrorObject
  status: 400
}

export type organizationsInvitesPartialUpdateResponse403 = {
  data: ErrorDetail
  status: 403
}

export type organizationsInvitesPartialUpdateResponseComposite =
  | organizationsInvitesPartialUpdateResponse200
  | organizationsInvitesPartialUpdateResponse400
  | organizationsInvitesPartialUpdateResponse403

export type organizationsInvitesPartialUpdateResponse = organizationsInvitesPartialUpdateResponseComposite & {
  headers: Headers
}

export const getOrganizationsInvitesPartialUpdateUrl = (organizationId: string, guid: string) => {
  return `/api/v2/organizations/${organizationId}/invites/${guid}/`
}

export const organizationsInvitesPartialUpdate = async (
  organizationId: string,
  guid: string,
  patchedInvitePatchPayload: PatchedInvitePatchPayload,
  options?: RequestInit,
): Promise<organizationsInvitesPartialUpdateResponse> => {
  return fetchWithAuth<organizationsInvitesPartialUpdateResponse>(
    getOrganizationsInvitesPartialUpdateUrl(organizationId, guid),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(patchedInvitePatchPayload),
    },
  )
}

export const getOrganizationsInvitesPartialUpdateMutationOptions = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsInvitesPartialUpdate>>,
    TError,
    { organizationId: string; guid: string; data: PatchedInvitePatchPayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizationsInvitesPartialUpdate>>,
  TError,
  { organizationId: string; guid: string; data: PatchedInvitePatchPayload },
  TContext
> => {
  const mutationKey = ['organizationsInvitesPartialUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizationsInvitesPartialUpdate>>,
    { organizationId: string; guid: string; data: PatchedInvitePatchPayload }
  > = (props) => {
    const { organizationId, guid, data } = props ?? {}

    return organizationsInvitesPartialUpdate(organizationId, guid, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsInvitesPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizationsInvitesPartialUpdate>>
>
export type OrganizationsInvitesPartialUpdateMutationBody = PatchedInvitePatchPayload
export type OrganizationsInvitesPartialUpdateMutationError = ErrorObject | ErrorDetail

export const useOrganizationsInvitesPartialUpdate = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsInvitesPartialUpdate>>,
    TError,
    { organizationId: string; guid: string; data: PatchedInvitePatchPayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getOrganizationsInvitesPartialUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Delete Organization Invite

* Organization owner or admin can delete an organization invite.

 */
export type organizationsInvitesDestroyResponse204 = {
  data: void
  status: 204
}

export type organizationsInvitesDestroyResponse403 = {
  data: ErrorDetail
  status: 403
}

export type organizationsInvitesDestroyResponseComposite =
  | organizationsInvitesDestroyResponse204
  | organizationsInvitesDestroyResponse403

export type organizationsInvitesDestroyResponse = organizationsInvitesDestroyResponseComposite & {
  headers: Headers
}

export const getOrganizationsInvitesDestroyUrl = (organizationId: string, guid: string) => {
  return `/api/v2/organizations/${organizationId}/invites/${guid}/`
}

export const organizationsInvitesDestroy = async (
  organizationId: string,
  guid: string,
  options?: RequestInit,
): Promise<organizationsInvitesDestroyResponse> => {
  return fetchWithAuth<organizationsInvitesDestroyResponse>(getOrganizationsInvitesDestroyUrl(organizationId, guid), {
    ...options,
    method: 'DELETE',
  })
}

export const getOrganizationsInvitesDestroyMutationOptions = <TError = ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsInvitesDestroy>>,
    TError,
    { organizationId: string; guid: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizationsInvitesDestroy>>,
  TError,
  { organizationId: string; guid: string },
  TContext
> => {
  const mutationKey = ['organizationsInvitesDestroy']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizationsInvitesDestroy>>,
    { organizationId: string; guid: string }
  > = (props) => {
    const { organizationId, guid } = props ?? {}

    return organizationsInvitesDestroy(organizationId, guid, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsInvitesDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizationsInvitesDestroy>>
>

export type OrganizationsInvitesDestroyMutationError = ErrorDetail

export const useOrganizationsInvitesDestroy = <TError = ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsInvitesDestroy>>,
    TError,
    { organizationId: string; guid: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getOrganizationsInvitesDestroyMutationOptions(options)

  return useMutation(mutationOptions)
}
