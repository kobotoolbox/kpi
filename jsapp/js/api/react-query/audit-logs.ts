/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { AuditLogsListParams } from '../models/auditLogsListParams'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { PaginatedAuditLogResponseList } from '../models/paginatedAuditLogResponseList'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List actions performed by users.

‚ö†Ô∏è _Only available to superusers_

Results from this endpoint can be filtered by a Boolean query specified in the `q` parameter.

**Filterable fields:**

* app_label
* model_name
* action
  Available actions:
   * create
   * delete
   * in-trash
   * put-back
   * remove
   * update
   * auth
* log_type
  Available log types:
    * access
    * project-history
    * data-editing
    * submission-management
    * user-management
    * asset-management
* date_created
* user_uid
* user__username
* user__email
* user__is_superuser
* metadata__asset_uid
* metadata__auth_type

*Notes: Some logs may have additional filterable fields in the metadata*

**Some examples:**

* All deleted submissions
    `api/v2/audit-logs/?q=action:delete`
* All deleted submissions of a specific project `aTJ3vi2KRGYj2NytSzBPp7`
    `api/v2/audit-logs/?q=action:delete AND metadata__asset_uid:aTJ3vi2KRGYj2NytSzBPp7`
* All submissions deleted by a specific user `my_username`
    `api/v2/audit-logs/?q=action:delete AND user__username:my_username`
* All deleted submissions submitted after a specific date
    `/api/v2/audit-logs/?q=action:delete AND date_created__gte:2022-11-15`
* All deleted submissions submitted after a specific date **and time**
    `/api/v2/audit-logs/?q=action:delete AND date_created__gte:"2022-11-15 20:34"`
* All authentications from superusers
    `api/v2/audit-logs/?q=action:auth AND user__is_superuser:True`

*Notes: Do not forget to wrap search terms in double-quotes if they contain spaces
(e.g. date and time "2022-11-15 20:34")*

 */
export type auditLogsListResponse200 = {
  data: PaginatedAuditLogResponseList
  status: 200
}

export type auditLogsListResponse403 = {
  data: ErrorDetail
  status: 403
}

export type auditLogsListResponse404 = {
  data: ErrorObject
  status: 404
}

export type auditLogsListResponseComposite =
  | auditLogsListResponse200
  | auditLogsListResponse403
  | auditLogsListResponse404

export type auditLogsListResponse = auditLogsListResponseComposite & {
  headers: Headers
}

export const getAuditLogsListUrl = (params?: AuditLogsListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ? `/api/v2/audit-logs/?${stringifiedParams}` : `/api/v2/audit-logs/`
}

export const auditLogsList = async (
  params?: AuditLogsListParams,
  options?: RequestInit,
): Promise<auditLogsListResponse> => {
  return fetchWithAuth<auditLogsListResponse>(getAuditLogsListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getAuditLogsListQueryKey = (params?: AuditLogsListParams) => {
  return ['api', 'v2', 'audit-logs', ...(params ? [params] : [])] as const
}

export const getAuditLogsListQueryOptions = <
  TData = Awaited<ReturnType<typeof auditLogsList>>,
  TError = ErrorDetail | ErrorObject,
>(
  params?: AuditLogsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof auditLogsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAuditLogsListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof auditLogsList>>> = ({ signal }) =>
    auditLogsList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof auditLogsList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AuditLogsListQueryResult = NonNullable<Awaited<ReturnType<typeof auditLogsList>>>
export type AuditLogsListQueryError = ErrorDetail | ErrorObject

export function useAuditLogsList<TData = Awaited<ReturnType<typeof auditLogsList>>, TError = ErrorDetail | ErrorObject>(
  params?: AuditLogsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof auditLogsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAuditLogsListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
