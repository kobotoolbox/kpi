/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { PaginatedTranslationServiceList } from '../models/paginatedTranslationServiceList'

import type { TranslationService } from '../models/translationService'

import type { TranslationServicesListParams } from '../models/translationServicesListParams'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List the translation services accessible to requesting (authenticated) user.

Search can be made with `q` parameter to search for the term in names and codes.

Results are ordered by name.


 */
export type translationServicesListResponse200 = {
  data: PaginatedTranslationServiceList
  status: 200
}

export type translationServicesListResponse400 = {
  data: ErrorObject
  status: 400
}

export type translationServicesListResponse401 = {
  data: ErrorDetail
  status: 401
}

export type translationServicesListResponseComposite =
  | translationServicesListResponse200
  | translationServicesListResponse400
  | translationServicesListResponse401

export type translationServicesListResponse = translationServicesListResponseComposite & {
  headers: Headers
}

export const getTranslationServicesListUrl = (params?: TranslationServicesListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/translation-services/?${stringifiedParams}`
    : `/api/v2/translation-services/`
}

export const translationServicesList = async (
  params?: TranslationServicesListParams,
  options?: RequestInit,
): Promise<translationServicesListResponse> => {
  return fetchWithAuth<translationServicesListResponse>(getTranslationServicesListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getTranslationServicesListQueryKey = (params?: TranslationServicesListParams) => {
  return ['api', 'v2', 'translation-services', ...(params ? [params] : [])] as const
}

export const getTranslationServicesListQueryOptions = <
  TData = Awaited<ReturnType<typeof translationServicesList>>,
  TError = ErrorObject | ErrorDetail,
>(
  params?: TranslationServicesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof translationServicesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTranslationServicesListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof translationServicesList>>> = ({ signal }) =>
    translationServicesList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof translationServicesList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type TranslationServicesListQueryResult = NonNullable<Awaited<ReturnType<typeof translationServicesList>>>
export type TranslationServicesListQueryError = ErrorObject | ErrorDetail

export function useTranslationServicesList<
  TData = Awaited<ReturnType<typeof translationServicesList>>,
  TError = ErrorObject | ErrorDetail,
>(
  params?: TranslationServicesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof translationServicesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTranslationServicesListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve a translation service

* `code` - is the unique identifier of a specific language

 */
export type translationServicesRetrieveResponse200 = {
  data: TranslationService
  status: 200
}

export type translationServicesRetrieveResponse401 = {
  data: ErrorDetail
  status: 401
}

export type translationServicesRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type translationServicesRetrieveResponseComposite =
  | translationServicesRetrieveResponse200
  | translationServicesRetrieveResponse401
  | translationServicesRetrieveResponse404

export type translationServicesRetrieveResponse = translationServicesRetrieveResponseComposite & {
  headers: Headers
}

export const getTranslationServicesRetrieveUrl = (code: string) => {
  return `/api/v2/translation-services/${code}/`
}

export const translationServicesRetrieve = async (
  code: string,
  options?: RequestInit,
): Promise<translationServicesRetrieveResponse> => {
  return fetchWithAuth<translationServicesRetrieveResponse>(getTranslationServicesRetrieveUrl(code), {
    ...options,
    method: 'GET',
  })
}

export const getTranslationServicesRetrieveQueryKey = (code: string) => {
  return ['api', 'v2', 'translation-services', code] as const
}

export const getTranslationServicesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof translationServicesRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof translationServicesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTranslationServicesRetrieveQueryKey(code)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof translationServicesRetrieve>>> = ({ signal }) =>
    translationServicesRetrieve(code, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof translationServicesRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type TranslationServicesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof translationServicesRetrieve>>
>
export type TranslationServicesRetrieveQueryError = ErrorDetail | ErrorObject

export function useTranslationServicesRetrieve<
  TData = Awaited<ReturnType<typeof translationServicesRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof translationServicesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTranslationServicesRetrieveQueryOptions(code, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
