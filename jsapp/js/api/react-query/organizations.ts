/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { OrganizationResponse } from '../models/organizationResponse'

import type { OrganizationServiceUsageResponse } from '../models/organizationServiceUsageResponse'

import type { OrganizationsListParams } from '../models/organizationsListParams'

import type { PaginatedAssetList } from '../models/paginatedAssetList'

import type { PaginatedOrganizationAssetUsageResponseList } from '../models/paginatedOrganizationAssetUsageResponseList'

import type { PaginatedOrganizationResponseList } from '../models/paginatedOrganizationResponseList'

import type { PatchedOrganizationPatchPayload } from '../models/patchedOrganizationPatchPayload'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List user's organizations

 */
export type organizationsListResponse200 = {
  data: PaginatedOrganizationResponseList
  status: 200
}

export type organizationsListResponse404 = {
  data: ErrorDetail
  status: 404
}

export type organizationsListResponseComposite = organizationsListResponse200 | organizationsListResponse404

export type organizationsListResponse = organizationsListResponseComposite & {
  headers: Headers
}

export const getOrganizationsListUrl = (params?: OrganizationsListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ? `/api/v2/organizations/?${stringifiedParams}` : `/api/v2/organizations/`
}

export const organizationsList = async (
  params?: OrganizationsListParams,
  options?: RequestInit,
): Promise<organizationsListResponse> => {
  return fetchWithAuth<organizationsListResponse>(getOrganizationsListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getOrganizationsListQueryKey = (params?: OrganizationsListParams) => {
  return ['api', 'v2', 'organizations', ...(params ? [params] : [])] as const
}

export const getOrganizationsListQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationsList>>,
  TError = ErrorDetail,
>(
  params?: OrganizationsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOrganizationsListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsList>>> = ({ signal }) =>
    organizationsList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationsList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type OrganizationsListQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsList>>>
export type OrganizationsListQueryError = ErrorDetail

export function useOrganizationsList<TData = Awaited<ReturnType<typeof organizationsList>>, TError = ErrorDetail>(
  params?: OrganizationsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve organization's details

 */
export type organizationsRetrieveResponse200 = {
  data: OrganizationResponse
  status: 200
}

export type organizationsRetrieveResponse404 = {
  data: ErrorDetail
  status: 404
}

export type organizationsRetrieveResponseComposite = organizationsRetrieveResponse200 | organizationsRetrieveResponse404

export type organizationsRetrieveResponse = organizationsRetrieveResponseComposite & {
  headers: Headers
}

export const getOrganizationsRetrieveUrl = (id: string) => {
  return `/api/v2/organizations/${id}/`
}

export const organizationsRetrieve = async (
  id: string,
  options?: RequestInit,
): Promise<organizationsRetrieveResponse> => {
  return fetchWithAuth<organizationsRetrieveResponse>(getOrganizationsRetrieveUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getOrganizationsRetrieveQueryKey = (id: string) => {
  return ['api', 'v2', 'organizations', id] as const
}

export const getOrganizationsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationsRetrieve>>,
  TError = ErrorDetail,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOrganizationsRetrieveQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsRetrieve>>> = ({ signal }) =>
    organizationsRetrieve(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationsRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type OrganizationsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsRetrieve>>>
export type OrganizationsRetrieveQueryError = ErrorDetail

export function useOrganizationsRetrieve<
  TData = Awaited<ReturnType<typeof organizationsRetrieve>>,
  TError = ErrorDetail,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsRetrieveQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Update organization's details

 */
export type organizationsPartialUpdateResponse200 = {
  data: OrganizationResponse
  status: 200
}

export type organizationsPartialUpdateResponse400 = {
  data: ErrorObject
  status: 400
}

export type organizationsPartialUpdateResponse404 = {
  data: ErrorDetail
  status: 404
}

export type organizationsPartialUpdateResponseComposite =
  | organizationsPartialUpdateResponse200
  | organizationsPartialUpdateResponse400
  | organizationsPartialUpdateResponse404

export type organizationsPartialUpdateResponse = organizationsPartialUpdateResponseComposite & {
  headers: Headers
}

export const getOrganizationsPartialUpdateUrl = (id: string) => {
  return `/api/v2/organizations/${id}/`
}

export const organizationsPartialUpdate = async (
  id: string,
  patchedOrganizationPatchPayload: PatchedOrganizationPatchPayload,
  options?: RequestInit,
): Promise<organizationsPartialUpdateResponse> => {
  return fetchWithAuth<organizationsPartialUpdateResponse>(getOrganizationsPartialUpdateUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(patchedOrganizationPatchPayload),
  })
}

export const getOrganizationsPartialUpdateMutationOptions = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsPartialUpdate>>,
    TError,
    { id: string; data: PatchedOrganizationPatchPayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizationsPartialUpdate>>,
  TError,
  { id: string; data: PatchedOrganizationPatchPayload },
  TContext
> => {
  const mutationKey = ['organizationsPartialUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizationsPartialUpdate>>,
    { id: string; data: PatchedOrganizationPatchPayload }
  > = (props) => {
    const { id, data } = props ?? {}

    return organizationsPartialUpdate(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizationsPartialUpdate>>
>
export type OrganizationsPartialUpdateMutationBody = PatchedOrganizationPatchPayload
export type OrganizationsPartialUpdateMutationError = ErrorObject | ErrorDetail

export const useOrganizationsPartialUpdate = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsPartialUpdate>>,
    TError,
    { id: string; data: PatchedOrganizationPatchPayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getOrganizationsPartialUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Retrieve organization asset usage tracker

Tracks the total usage of each asset for the user in the given organization

 */
export type organizationsAssetUsageRetrieveResponse200 = {
  data: PaginatedOrganizationAssetUsageResponseList
  status: 200
}

export type organizationsAssetUsageRetrieveResponse404 = {
  data: ErrorDetail
  status: 404
}

export type organizationsAssetUsageRetrieveResponseComposite =
  | organizationsAssetUsageRetrieveResponse200
  | organizationsAssetUsageRetrieveResponse404

export type organizationsAssetUsageRetrieveResponse = organizationsAssetUsageRetrieveResponseComposite & {
  headers: Headers
}

export const getOrganizationsAssetUsageRetrieveUrl = (id: string) => {
  return `/api/v2/organizations/${id}/asset_usage/`
}

export const organizationsAssetUsageRetrieve = async (
  id: string,
  options?: RequestInit,
): Promise<organizationsAssetUsageRetrieveResponse> => {
  return fetchWithAuth<organizationsAssetUsageRetrieveResponse>(getOrganizationsAssetUsageRetrieveUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getOrganizationsAssetUsageRetrieveQueryKey = (id: string) => {
  return ['api', 'v2', 'organizations', id, 'asset_usage'] as const
}

export const getOrganizationsAssetUsageRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationsAssetUsageRetrieve>>,
  TError = ErrorDetail,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsAssetUsageRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOrganizationsAssetUsageRetrieveQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsAssetUsageRetrieve>>> = ({ signal }) =>
    organizationsAssetUsageRetrieve(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationsAssetUsageRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type OrganizationsAssetUsageRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof organizationsAssetUsageRetrieve>>
>
export type OrganizationsAssetUsageRetrieveQueryError = ErrorDetail

export function useOrganizationsAssetUsageRetrieve<
  TData = Awaited<ReturnType<typeof organizationsAssetUsageRetrieve>>,
  TError = ErrorDetail,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsAssetUsageRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsAssetUsageRetrieveQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve Organization Assets

This endpoint returns all assets associated with a specific organization.
The assets listed here are restricted to those owned by the specified
organization.

Only the owner or administrators of the organization can access this endpoint.

### Additional Information
For more details, please refer to `/api/v2/assets/`.

 */
export type organizationsAssetsRetrieveResponse200 = {
  data: PaginatedAssetList
  status: 200
}

export type organizationsAssetsRetrieveResponse404 = {
  data: ErrorDetail
  status: 404
}

export type organizationsAssetsRetrieveResponseComposite =
  | organizationsAssetsRetrieveResponse200
  | organizationsAssetsRetrieveResponse404

export type organizationsAssetsRetrieveResponse = organizationsAssetsRetrieveResponseComposite & {
  headers: Headers
}

export const getOrganizationsAssetsRetrieveUrl = (id: string) => {
  return `/api/v2/organizations/${id}/assets/`
}

export const organizationsAssetsRetrieve = async (
  id: string,
  options?: RequestInit,
): Promise<organizationsAssetsRetrieveResponse> => {
  return fetchWithAuth<organizationsAssetsRetrieveResponse>(getOrganizationsAssetsRetrieveUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getOrganizationsAssetsRetrieveQueryKey = (id: string) => {
  return ['api', 'v2', 'organizations', id, 'assets'] as const
}

export const getOrganizationsAssetsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationsAssetsRetrieve>>,
  TError = ErrorDetail,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsAssetsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOrganizationsAssetsRetrieveQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsAssetsRetrieve>>> = ({ signal }) =>
    organizationsAssetsRetrieve(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationsAssetsRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type OrganizationsAssetsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof organizationsAssetsRetrieve>>
>
export type OrganizationsAssetsRetrieveQueryError = ErrorDetail

export function useOrganizationsAssetsRetrieve<
  TData = Awaited<ReturnType<typeof organizationsAssetsRetrieve>>,
  TError = ErrorDetail,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsAssetsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsAssetsRetrieveQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Organization Usage Tracker

- Tracks the total usage of different services for each account in an organization
- Tracks the submissions and NLP seconds/characters for the current month/year/all time
- Tracks the current total storage used
- Includes a detailed list of balances relative to a user's usage limits
- If no organization is found with the provided ID, returns the usage for the logged-in user

**This endpoint is cached for an amount of time determined by ENDPOINT_CACHE_DURATION**

 */
export type organizationsServiceUsageRetrieveResponse200 = {
  data: OrganizationServiceUsageResponse
  status: 200
}

export type organizationsServiceUsageRetrieveResponse404 = {
  data: ErrorDetail
  status: 404
}

export type organizationsServiceUsageRetrieveResponseComposite =
  | organizationsServiceUsageRetrieveResponse200
  | organizationsServiceUsageRetrieveResponse404

export type organizationsServiceUsageRetrieveResponse = organizationsServiceUsageRetrieveResponseComposite & {
  headers: Headers
}

export const getOrganizationsServiceUsageRetrieveUrl = (id: string) => {
  return `/api/v2/organizations/${id}/service_usage/`
}

export const organizationsServiceUsageRetrieve = async (
  id: string,
  options?: RequestInit,
): Promise<organizationsServiceUsageRetrieveResponse> => {
  return fetchWithAuth<organizationsServiceUsageRetrieveResponse>(getOrganizationsServiceUsageRetrieveUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getOrganizationsServiceUsageRetrieveQueryKey = (id: string) => {
  return ['api', 'v2', 'organizations', id, 'service_usage'] as const
}

export const getOrganizationsServiceUsageRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationsServiceUsageRetrieve>>,
  TError = ErrorDetail,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsServiceUsageRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOrganizationsServiceUsageRetrieveQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsServiceUsageRetrieve>>> = ({ signal }) =>
    organizationsServiceUsageRetrieve(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationsServiceUsageRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type OrganizationsServiceUsageRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof organizationsServiceUsageRetrieve>>
>
export type OrganizationsServiceUsageRetrieveQueryError = ErrorDetail

export function useOrganizationsServiceUsageRetrieve<
  TData = Awaited<ReturnType<typeof organizationsServiceUsageRetrieve>>,
  TError = ErrorDetail,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsServiceUsageRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsServiceUsageRetrieveQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
