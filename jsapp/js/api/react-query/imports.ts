/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { ImportCreateRequest } from '../models/importCreateRequest'

import type { ImportCreateResponse } from '../models/importCreateResponse'

import type { ImportResponse } from '../models/importResponse'

import type { ImportsListParams } from '../models/importsListParams'

import type { PaginatedImportResponseList } from '../models/paginatedImportResponseList'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List imported files

 */
export type importsListResponse200 = {
  data: PaginatedImportResponseList
  status: 200
}

export type importsListResponse401 = {
  data: ErrorDetail
  status: 401
}

export type importsListResponseComposite = importsListResponse200 | importsListResponse401

export type importsListResponse = importsListResponseComposite & {
  headers: Headers
}

export const getImportsListUrl = (params?: ImportsListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ? `/api/v2/imports/?${stringifiedParams}` : `/api/v2/imports/`
}

export const importsList = async (params?: ImportsListParams, options?: RequestInit): Promise<importsListResponse> => {
  return fetchWithAuth<importsListResponse>(getImportsListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getImportsListQueryKey = (params?: ImportsListParams) => {
  return ['api', 'v2', 'imports', ...(params ? [params] : [])] as const
}

export const getImportsListQueryOptions = <TData = Awaited<ReturnType<typeof importsList>>, TError = ErrorDetail>(
  params?: ImportsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof importsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getImportsListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof importsList>>> = ({ signal }) =>
    importsList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof importsList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ImportsListQueryResult = NonNullable<Awaited<ReturnType<typeof importsList>>>
export type ImportsListQueryError = ErrorDetail

export function useImportsList<TData = Awaited<ReturnType<typeof importsList>>, TError = ErrorDetail>(
  params?: ImportsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof importsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getImportsListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Import file

_**Note**: this endpoint is expecting a multipart/form-data_

 */
export type importsCreateResponse201 = {
  data: ImportCreateResponse
  status: 201
}

export type importsCreateResponse400 = {
  data: ErrorObject
  status: 400
}

export type importsCreateResponse401 = {
  data: ErrorDetail
  status: 401
}

export type importsCreateResponseComposite =
  | importsCreateResponse201
  | importsCreateResponse400
  | importsCreateResponse401

export type importsCreateResponse = importsCreateResponseComposite & {
  headers: Headers
}

export const getImportsCreateUrl = () => {
  return `/api/v2/imports/`
}

export const importsCreate = async (
  importCreateRequest: ImportCreateRequest,
  options?: RequestInit,
): Promise<importsCreateResponse> => {
  const formData = new FormData()
  formData.append(`destination`, importCreateRequest.destination)
  formData.append(`url`, importCreateRequest.url)
  if (importCreateRequest.name !== undefined) {
    formData.append(`name`, importCreateRequest.name)
  }
  formData.append(`assetUid`, importCreateRequest.assetUid)

  return fetchWithAuth<importsCreateResponse>(getImportsCreateUrl(), {
    ...options,
    method: 'POST',
    body: formData,
  })
}

export const getImportsCreateMutationOptions = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof importsCreate>>,
    TError,
    { data: ImportCreateRequest },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<Awaited<ReturnType<typeof importsCreate>>, TError, { data: ImportCreateRequest }, TContext> => {
  const mutationKey = ['importsCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof importsCreate>>, { data: ImportCreateRequest }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return importsCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ImportsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof importsCreate>>>
export type ImportsCreateMutationBody = ImportCreateRequest
export type ImportsCreateMutationError = ErrorObject | ErrorDetail

export const useImportsCreate = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof importsCreate>>,
    TError,
    { data: ImportCreateRequest },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getImportsCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Retrieve imported files

 */
export type importsRetrieveResponse200 = {
  data: ImportResponse
  status: 200
}

export type importsRetrieveResponse401 = {
  data: ErrorDetail
  status: 401
}

export type importsRetrieveResponseComposite = importsRetrieveResponse200 | importsRetrieveResponse401

export type importsRetrieveResponse = importsRetrieveResponseComposite & {
  headers: Headers
}

export const getImportsRetrieveUrl = (uid: string) => {
  return `/api/v2/imports/${uid}/`
}

export const importsRetrieve = async (uid: string, options?: RequestInit): Promise<importsRetrieveResponse> => {
  return fetchWithAuth<importsRetrieveResponse>(getImportsRetrieveUrl(uid), {
    ...options,
    method: 'GET',
  })
}

export const getImportsRetrieveQueryKey = (uid: string) => {
  return ['api', 'v2', 'imports', uid] as const
}

export const getImportsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof importsRetrieve>>,
  TError = ErrorDetail,
>(
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof importsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getImportsRetrieveQueryKey(uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof importsRetrieve>>> = ({ signal }) =>
    importsRetrieve(uid, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!uid, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof importsRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ImportsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof importsRetrieve>>>
export type ImportsRetrieveQueryError = ErrorDetail

export function useImportsRetrieve<TData = Awaited<ReturnType<typeof importsRetrieve>>, TError = ErrorDetail>(
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof importsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getImportsRetrieveQueryOptions(uid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
