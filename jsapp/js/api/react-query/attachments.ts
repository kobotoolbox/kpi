/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { AssetsDataAttachmentsListParams } from '../models/assetsDataAttachmentsListParams'

import type { AttachmentRetrieveParams } from '../models/attachmentRetrieveParams'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## Delete a specific attachment of an Asset

* `id` can only be the uid of attachment to be deleted

 */
export type assetsAttachmentsDestroyResponse204 = {
  data: void
  status: 204
}

export type assetsAttachmentsDestroyResponse400 = {
  data: ErrorObject
  status: 400
}

export type assetsAttachmentsDestroyResponse404 = {
  data: ErrorDetail
  status: 404
}

export type assetsAttachmentsDestroyResponseComposite =
  | assetsAttachmentsDestroyResponse204
  | assetsAttachmentsDestroyResponse400
  | assetsAttachmentsDestroyResponse404

export type assetsAttachmentsDestroyResponse = assetsAttachmentsDestroyResponseComposite & {
  headers: Headers
}

export const getAssetsAttachmentsDestroyUrl = (parentLookupAsset: string, id: number) => {
  return `/api/v2/assets/${parentLookupAsset}/attachments/${id}/`
}

export const assetsAttachmentsDestroy = async (
  parentLookupAsset: string,
  id: number,
  options?: RequestInit,
): Promise<assetsAttachmentsDestroyResponse> => {
  return fetchWithAuth<assetsAttachmentsDestroyResponse>(getAssetsAttachmentsDestroyUrl(parentLookupAsset, id), {
    ...options,
    method: 'DELETE',
  })
}

export const getAssetsAttachmentsDestroyMutationOptions = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsAttachmentsDestroy>>,
    TError,
    { parentLookupAsset: string; id: number },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsAttachmentsDestroy>>,
  TError,
  { parentLookupAsset: string; id: number },
  TContext
> => {
  const mutationKey = ['assetsAttachmentsDestroy']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsAttachmentsDestroy>>,
    { parentLookupAsset: string; id: number }
  > = (props) => {
    const { parentLookupAsset, id } = props ?? {}

    return assetsAttachmentsDestroy(parentLookupAsset, id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetsAttachmentsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof assetsAttachmentsDestroy>>>

export type AssetsAttachmentsDestroyMutationError = ErrorObject | ErrorDetail

export const useAssetsAttachmentsDestroy = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsAttachmentsDestroy>>,
    TError,
    { parentLookupAsset: string; id: number },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetsAttachmentsDestroyMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Delete all attachments from a list of submissions

```curl
  curl -X DELETE https://kf.kobotoolbox.org/api/v2/assets/aSAvYreNzVEkrWg5Gdcvg/attachments/bulk/
```

> **Payload**
>
>        {
>           "submission_root_uuids": [
>               "3ed2e8de-b493-4367-a78d-3463687239dc",
>               "ef18fe33-c71d-4638-84d6-dafcbd69c327"
>           ]
>        }

* Where: "submission_root_uuids" (required) is a list of submission root uuids on the asset
to delete


> **Response**
>
>        {
>           "message": "{number_of_attachment} attachments deleted"
>        }

* Where: "number_of_attachment" is the number of items that was deleted


### !! Due to current DRF-Spectacular limitations with AOS 3.1, DELETE operations do not display request or response bodies in this documentation (as payloads are not typically recommended for DELETE). This means direct testing is unavailable. However, example payloads and responses are provided for reference, and HTTP codes/error messages are accurate.  !!

 */
export type assetsAttachmentsBulkDestroyResponse202 = {
  data: void
  status: 202
}

export type assetsAttachmentsBulkDestroyResponse400 = {
  data: ErrorObject
  status: 400
}

export type assetsAttachmentsBulkDestroyResponse404 = {
  data: ErrorDetail
  status: 404
}

export type assetsAttachmentsBulkDestroyResponseComposite =
  | assetsAttachmentsBulkDestroyResponse202
  | assetsAttachmentsBulkDestroyResponse400
  | assetsAttachmentsBulkDestroyResponse404

export type assetsAttachmentsBulkDestroyResponse = assetsAttachmentsBulkDestroyResponseComposite & {
  headers: Headers
}

export const getAssetsAttachmentsBulkDestroyUrl = (parentLookupAsset: string) => {
  return `/api/v2/assets/${parentLookupAsset}/attachments/bulk/`
}

export const assetsAttachmentsBulkDestroy = async (
  parentLookupAsset: string,
  options?: RequestInit,
): Promise<assetsAttachmentsBulkDestroyResponse> => {
  return fetchWithAuth<assetsAttachmentsBulkDestroyResponse>(getAssetsAttachmentsBulkDestroyUrl(parentLookupAsset), {
    ...options,
    method: 'DELETE',
  })
}

export const getAssetsAttachmentsBulkDestroyMutationOptions = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsAttachmentsBulkDestroy>>,
    TError,
    { parentLookupAsset: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsAttachmentsBulkDestroy>>,
  TError,
  { parentLookupAsset: string },
  TContext
> => {
  const mutationKey = ['assetsAttachmentsBulkDestroy']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsAttachmentsBulkDestroy>>,
    { parentLookupAsset: string }
  > = (props) => {
    const { parentLookupAsset } = props ?? {}

    return assetsAttachmentsBulkDestroy(parentLookupAsset, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetsAttachmentsBulkDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsAttachmentsBulkDestroy>>
>

export type AssetsAttachmentsBulkDestroyMutationError = ErrorObject | ErrorDetail

export const useAssetsAttachmentsBulkDestroy = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsAttachmentsBulkDestroy>>,
    TError,
    { parentLookupAsset: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetsAttachmentsBulkDestroyMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Get an asset's attachment using xpath

* `parent_lookup_data` can be the primary key of the submission or its `uuid`.
Please note that using the `uuid` may match **several** submissions, only
the first match will be returned.

Use the `xpath` property to retrieve an attachment.

```curl
curl -X GET https://kf.kobotoolbox.org/api/v2/assets/aSAvYreNzVEkrWg5Gdcvg/data/451/attachment/?xpath=Upload_a_file
```

### Get an MP3 file from an audio or video file
Convert audio and video files. Only conversions to MP3 is supported for this feature

```curl
curl -X GET https://kf.kobotoolbox.org/api/v2/assets/aSAvYreNzVEkrWg5Gdcvg/data/451/attachment/?xpath=Upload_a_file&format=mp3
```

 */
export type assetsDataAttachmentsListResponse200 = {
  data: void
  status: 200
}

export type assetsDataAttachmentsListResponse400 = {
  data: ErrorObject
  status: 400
}

export type assetsDataAttachmentsListResponse404 = {
  data: ErrorDetail
  status: 404
}

export type assetsDataAttachmentsListResponseComposite =
  | assetsDataAttachmentsListResponse200
  | assetsDataAttachmentsListResponse400
  | assetsDataAttachmentsListResponse404

export type assetsDataAttachmentsListResponse = assetsDataAttachmentsListResponseComposite & {
  headers: Headers
}

export const getAssetsDataAttachmentsListUrl = (
  parentLookupAsset: string,
  parentLookupData: string,
  params: AssetsDataAttachmentsListParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/assets/${parentLookupAsset}/data/${parentLookupData}/attachments/?${stringifiedParams}`
    : `/api/v2/assets/${parentLookupAsset}/data/${parentLookupData}/attachments/`
}

export const assetsDataAttachmentsList = async (
  parentLookupAsset: string,
  parentLookupData: string,
  params: AssetsDataAttachmentsListParams,
  options?: RequestInit,
): Promise<assetsDataAttachmentsListResponse> => {
  return fetchWithAuth<assetsDataAttachmentsListResponse>(
    getAssetsDataAttachmentsListUrl(parentLookupAsset, parentLookupData, params),
    {
      ...options,
      method: 'GET',
    },
  )
}

export const getAssetsDataAttachmentsListQueryKey = (
  parentLookupAsset: string,
  parentLookupData: string,
  params: AssetsDataAttachmentsListParams,
) => {
  return [
    'api',
    'v2',
    'assets',
    parentLookupAsset,
    'data',
    parentLookupData,
    'attachments',
    ...(params ? [params] : []),
  ] as const
}

export const getAssetsDataAttachmentsListQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsDataAttachmentsList>>,
  TError = ErrorObject | ErrorDetail,
>(
  parentLookupAsset: string,
  parentLookupData: string,
  params: AssetsDataAttachmentsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsDataAttachmentsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAssetsDataAttachmentsListQueryKey(parentLookupAsset, parentLookupData, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsDataAttachmentsList>>> = ({ signal }) =>
    assetsDataAttachmentsList(parentLookupAsset, parentLookupData, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!(parentLookupAsset && parentLookupData), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsDataAttachmentsList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsDataAttachmentsListQueryResult = NonNullable<Awaited<ReturnType<typeof assetsDataAttachmentsList>>>
export type AssetsDataAttachmentsListQueryError = ErrorObject | ErrorDetail

export function useAssetsDataAttachmentsList<
  TData = Awaited<ReturnType<typeof assetsDataAttachmentsList>>,
  TError = ErrorObject | ErrorDetail,
>(
  parentLookupAsset: string,
  parentLookupData: string,
  params: AssetsDataAttachmentsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsDataAttachmentsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsDataAttachmentsListQueryOptions(parentLookupAsset, parentLookupData, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Get an asset's attachment using the ID

* `parent_lookup_data` can be the primary key of the submission or its `uuid`.
Please note that using the `uuid` may match **several** submissions, only
the first match will be returned.

* `id` of attachment can be the primary key of the attachment or its `uid`.

Both examples works:
```curl
curl -X GET https://kf.kobotoolbox.org/api/v2/assets/aSAvYreNzVEkrWg5Gdcvg/data/451/attachment/1/
```
Or, using the `UID`:
```curl
curl -X GET https://kf.kobotoolbox.org/api/v2/assets/aSAvYreNzVEkrWg5Gdcvg/data/451/attachment/attwYwGxdtQPSqgmHk6wS6E6/
```

### Get an MP3 file from an audio or video file
Convert audio and video files. Only conversions to MP3 is supported for this feature

```curl
curl -X GET https://kf.kobotoolbox.org/api/v2/assets/aSAvYreNzVEkrWg5Gdcvg/data/451/attachment/1/?format=mp3
```

 */
export type attachmentRetrieveResponse200 = {
  data: void
  status: 200
}

export type attachmentRetrieveResponse400 = {
  data: ErrorObject
  status: 400
}

export type attachmentRetrieveResponse404 = {
  data: ErrorDetail
  status: 404
}

export type attachmentRetrieveResponseComposite =
  | attachmentRetrieveResponse200
  | attachmentRetrieveResponse400
  | attachmentRetrieveResponse404

export type attachmentRetrieveResponse = attachmentRetrieveResponseComposite & {
  headers: Headers
}

export const getAttachmentRetrieveUrl = (
  parentLookupAsset: string,
  parentLookupData: string,
  id: number,
  params?: AttachmentRetrieveParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/assets/${parentLookupAsset}/data/${parentLookupData}/attachments/${id}/?${stringifiedParams}`
    : `/api/v2/assets/${parentLookupAsset}/data/${parentLookupData}/attachments/${id}/`
}

export const attachmentRetrieve = async (
  parentLookupAsset: string,
  parentLookupData: string,
  id: number,
  params?: AttachmentRetrieveParams,
  options?: RequestInit,
): Promise<attachmentRetrieveResponse> => {
  return fetchWithAuth<attachmentRetrieveResponse>(
    getAttachmentRetrieveUrl(parentLookupAsset, parentLookupData, id, params),
    {
      ...options,
      method: 'GET',
    },
  )
}

export const getAttachmentRetrieveQueryKey = (
  parentLookupAsset: string,
  parentLookupData: string,
  id: number,
  params?: AttachmentRetrieveParams,
) => {
  return [
    'api',
    'v2',
    'assets',
    parentLookupAsset,
    'data',
    parentLookupData,
    'attachments',
    id,
    ...(params ? [params] : []),
  ] as const
}

export const getAttachmentRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof attachmentRetrieve>>,
  TError = ErrorObject | ErrorDetail,
>(
  parentLookupAsset: string,
  parentLookupData: string,
  id: number,
  params?: AttachmentRetrieveParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof attachmentRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAttachmentRetrieveQueryKey(parentLookupAsset, parentLookupData, id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof attachmentRetrieve>>> = ({ signal }) =>
    attachmentRetrieve(parentLookupAsset, parentLookupData, id, params, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!(parentLookupAsset && parentLookupData && id),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof attachmentRetrieve>>, TError, TData> & { queryKey: QueryKey }
}

export type AttachmentRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof attachmentRetrieve>>>
export type AttachmentRetrieveQueryError = ErrorObject | ErrorDetail

export function useAttachmentRetrieve<
  TData = Awaited<ReturnType<typeof attachmentRetrieve>>,
  TError = ErrorObject | ErrorDetail,
>(
  parentLookupAsset: string,
  parentLookupData: string,
  id: number,
  params?: AttachmentRetrieveParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof attachmentRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAttachmentRetrieveQueryOptions(parentLookupAsset, parentLookupData, id, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Get a specific size of the user's attachment (Only for images)

Available formats:
- `small`
- `medium`
- `large`

`id` of attachment can be the primary key of the attachment or its `uid`.

Both examples works:
```curl
curl -X GET https://kf.kobotoolbox.org/api/v2/assets/aSAvYreNzVEkrWg5Gdcvg/data/451/attachment/1/small/
```
Or, using the `UID`:
```curl
curl -X GET https://kf.kobotoolbox.org/api/v2/assets/aSAvYreNzVEkrWg5Gdcvg/data/451/attachment/attwYwGxdtQPSqgmHk6wS6E6/medium/
```

 */
export type attachmentThumbnailResponse200 = {
  data: void
  status: 200
}

export type attachmentThumbnailResponse404 = {
  data: ErrorDetail
  status: 404
}

export type attachmentThumbnailResponseComposite = attachmentThumbnailResponse200 | attachmentThumbnailResponse404

export type attachmentThumbnailResponse = attachmentThumbnailResponseComposite & {
  headers: Headers
}

export const getAttachmentThumbnailUrl = (
  parentLookupAsset: string,
  parentLookupData: string,
  id: number,
  suffix: string,
) => {
  return `/api/v2/assets/${parentLookupAsset}/data/${parentLookupData}/attachments/${id}/${suffix}/`
}

export const attachmentThumbnail = async (
  parentLookupAsset: string,
  parentLookupData: string,
  id: number,
  suffix: string,
  options?: RequestInit,
): Promise<attachmentThumbnailResponse> => {
  return fetchWithAuth<attachmentThumbnailResponse>(
    getAttachmentThumbnailUrl(parentLookupAsset, parentLookupData, id, suffix),
    {
      ...options,
      method: 'GET',
    },
  )
}

export const getAttachmentThumbnailQueryKey = (
  parentLookupAsset: string,
  parentLookupData: string,
  id: number,
  suffix: string,
) => {
  return ['api', 'v2', 'assets', parentLookupAsset, 'data', parentLookupData, 'attachments', id, suffix] as const
}

export const getAttachmentThumbnailQueryOptions = <
  TData = Awaited<ReturnType<typeof attachmentThumbnail>>,
  TError = ErrorDetail,
>(
  parentLookupAsset: string,
  parentLookupData: string,
  id: number,
  suffix: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof attachmentThumbnail>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAttachmentThumbnailQueryKey(parentLookupAsset, parentLookupData, id, suffix)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof attachmentThumbnail>>> = ({ signal }) =>
    attachmentThumbnail(parentLookupAsset, parentLookupData, id, suffix, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!(parentLookupAsset && parentLookupData && id && suffix),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof attachmentThumbnail>>, TError, TData> & { queryKey: QueryKey }
}

export type AttachmentThumbnailQueryResult = NonNullable<Awaited<ReturnType<typeof attachmentThumbnail>>>
export type AttachmentThumbnailQueryError = ErrorDetail

export function useAttachmentThumbnail<TData = Awaited<ReturnType<typeof attachmentThumbnail>>, TError = ErrorDetail>(
  parentLookupAsset: string,
  parentLookupData: string,
  id: number,
  suffix: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof attachmentThumbnail>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAttachmentThumbnailQueryOptions(parentLookupAsset, parentLookupData, id, suffix, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
