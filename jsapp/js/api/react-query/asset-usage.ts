/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { AssetUsageListParams } from '../models/assetUsageListParams'

import type { ErrorDetail } from '../models/errorDetail'

import type { PaginatedAssetUsageResponseList } from '../models/paginatedAssetUsageResponseList'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## Get user's asset usage

 */
export type assetUsageListResponse200 = {
  data: PaginatedAssetUsageResponseList
  status: 200
}

export type assetUsageListResponse401 = {
  data: ErrorDetail
  status: 401
}

export type assetUsageListResponseComposite = assetUsageListResponse200 | assetUsageListResponse401

export type assetUsageListResponse = assetUsageListResponseComposite & {
  headers: Headers
}

export const getAssetUsageListUrl = (params?: AssetUsageListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ? `/api/v2/asset_usage/?${stringifiedParams}` : `/api/v2/asset_usage/`
}

export const assetUsageList = async (
  params?: AssetUsageListParams,
  options?: RequestInit,
): Promise<assetUsageListResponse> => {
  return fetchWithAuth<assetUsageListResponse>(getAssetUsageListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getAssetUsageListQueryKey = (params?: AssetUsageListParams) => {
  return ['api', 'v2', 'asset_usage', ...(params ? [params] : [])] as const
}

export const getAssetUsageListQueryOptions = <TData = Awaited<ReturnType<typeof assetUsageList>>, TError = ErrorDetail>(
  params?: AssetUsageListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetUsageList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetUsageListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetUsageList>>> = ({ signal }) =>
    assetUsageList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetUsageList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetUsageListQueryResult = NonNullable<Awaited<ReturnType<typeof assetUsageList>>>
export type AssetUsageListQueryError = ErrorDetail

export function useAssetUsageList<TData = Awaited<ReturnType<typeof assetUsageList>>, TError = ErrorDetail>(
  params?: AssetUsageListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetUsageList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetUsageListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
