/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * This page documents all KoboToolbox API endpoints.

The endpoints are grouped by area of intended use. Each category contains related endpoints, with detailed documentation on usage and configuration. Use this as a reference to quickly find the right endpoint for managing projects, forms, data, permissions, integrations, logs, and organizational resources.

**General note**: All projects (whether deployed or draft), as well as all library content (questions, blocks, templates, and collections) in the user-facing application are represented in the API as assets.
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { AssetSubscriptionRequest } from '../models/assetSubscriptionRequest'

import type { AssetSubscriptionResponse } from '../models/assetSubscriptionResponse'

import type { AssetSubscriptionsListParams } from '../models/assetSubscriptionsListParams'

import type { ErrorObject } from '../models/errorObject'

import type { PaginatedAssetSubscriptionResponseList } from '../models/paginatedAssetSubscriptionResponseList'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List all asset subscriptions of a user

 */
export type assetSubscriptionsListResponse200 = {
  data: PaginatedAssetSubscriptionResponseList
  status: 200
}

export type assetSubscriptionsListResponseComposite = assetSubscriptionsListResponse200

export type assetSubscriptionsListResponse = assetSubscriptionsListResponseComposite & {
  headers: Headers
}

export const getAssetSubscriptionsListUrl = (params?: AssetSubscriptionsListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/asset_subscriptions/?${stringifiedParams}`
    : `/api/v2/asset_subscriptions/`
}

export const assetSubscriptionsList = async (
  params?: AssetSubscriptionsListParams,
  options?: RequestInit,
): Promise<assetSubscriptionsListResponse> => {
  return fetchWithAuth<assetSubscriptionsListResponse>(getAssetSubscriptionsListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getAssetSubscriptionsListQueryKey = (params?: AssetSubscriptionsListParams) => {
  return ['api', 'v2', 'asset_subscriptions', ...(params ? [params] : [])] as const
}

export const getAssetSubscriptionsListQueryOptions = <
  TData = Awaited<ReturnType<typeof assetSubscriptionsList>>,
  TError = unknown,
>(
  params?: AssetSubscriptionsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetSubscriptionsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetSubscriptionsListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetSubscriptionsList>>> = ({ signal }) =>
    assetSubscriptionsList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetSubscriptionsList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetSubscriptionsListQueryResult = NonNullable<Awaited<ReturnType<typeof assetSubscriptionsList>>>
export type AssetSubscriptionsListQueryError = unknown

export function useAssetSubscriptionsList<TData = Awaited<ReturnType<typeof assetSubscriptionsList>>, TError = unknown>(
  params?: AssetSubscriptionsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetSubscriptionsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetSubscriptionsListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Create an asset subscription

Create a subscription to a public collection for the user.

 */
export type assetSubscriptionsCreateResponse201 = {
  data: AssetSubscriptionResponse
  status: 201
}

export type assetSubscriptionsCreateResponse400 = {
  data: ErrorObject
  status: 400
}

export type assetSubscriptionsCreateResponseComposite =
  | assetSubscriptionsCreateResponse201
  | assetSubscriptionsCreateResponse400

export type assetSubscriptionsCreateResponse = assetSubscriptionsCreateResponseComposite & {
  headers: Headers
}

export const getAssetSubscriptionsCreateUrl = () => {
  return `/api/v2/asset_subscriptions/`
}

export const assetSubscriptionsCreate = async (
  assetSubscriptionRequest: AssetSubscriptionRequest,
  options?: RequestInit,
): Promise<assetSubscriptionsCreateResponse> => {
  return fetchWithAuth<assetSubscriptionsCreateResponse>(getAssetSubscriptionsCreateUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(assetSubscriptionRequest),
  })
}

export const getAssetSubscriptionsCreateMutationOptions = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetSubscriptionsCreate>>,
    TError,
    { data: AssetSubscriptionRequest },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetSubscriptionsCreate>>,
  TError,
  { data: AssetSubscriptionRequest },
  TContext
> => {
  const mutationKey = ['assetSubscriptionsCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetSubscriptionsCreate>>,
    { data: AssetSubscriptionRequest }
  > = (props) => {
    const { data } = props ?? {}

    return assetSubscriptionsCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetSubscriptionsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof assetSubscriptionsCreate>>>
export type AssetSubscriptionsCreateMutationBody = AssetSubscriptionRequest
export type AssetSubscriptionsCreateMutationError = ErrorObject

export const useAssetSubscriptionsCreate = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetSubscriptionsCreate>>,
    TError,
    { data: AssetSubscriptionRequest },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetSubscriptionsCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Retrieve an asset subscription

 */
export type assetSubscriptionsRetrieveResponse200 = {
  data: AssetSubscriptionResponse
  status: 200
}

export type assetSubscriptionsRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetSubscriptionsRetrieveResponseComposite =
  | assetSubscriptionsRetrieveResponse200
  | assetSubscriptionsRetrieveResponse404

export type assetSubscriptionsRetrieveResponse = assetSubscriptionsRetrieveResponseComposite & {
  headers: Headers
}

export const getAssetSubscriptionsRetrieveUrl = (uid: string) => {
  return `/api/v2/asset_subscriptions/${uid}/`
}

export const assetSubscriptionsRetrieve = async (
  uid: string,
  options?: RequestInit,
): Promise<assetSubscriptionsRetrieveResponse> => {
  return fetchWithAuth<assetSubscriptionsRetrieveResponse>(getAssetSubscriptionsRetrieveUrl(uid), {
    ...options,
    method: 'GET',
  })
}

export const getAssetSubscriptionsRetrieveQueryKey = (uid: string) => {
  return ['api', 'v2', 'asset_subscriptions', uid] as const
}

export const getAssetSubscriptionsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof assetSubscriptionsRetrieve>>,
  TError = ErrorObject,
>(
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetSubscriptionsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetSubscriptionsRetrieveQueryKey(uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetSubscriptionsRetrieve>>> = ({ signal }) =>
    assetSubscriptionsRetrieve(uid, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!uid, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetSubscriptionsRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetSubscriptionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof assetSubscriptionsRetrieve>>>
export type AssetSubscriptionsRetrieveQueryError = ErrorObject

export function useAssetSubscriptionsRetrieve<
  TData = Awaited<ReturnType<typeof assetSubscriptionsRetrieve>>,
  TError = ErrorObject,
>(
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetSubscriptionsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetSubscriptionsRetrieveQueryOptions(uid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Delete a subscription to an asset

Unsubscribe from a public asset.

 */
export type assetSubscriptionsDestroyResponse204 = {
  data: void
  status: 204
}

export type assetSubscriptionsDestroyResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetSubscriptionsDestroyResponseComposite =
  | assetSubscriptionsDestroyResponse204
  | assetSubscriptionsDestroyResponse404

export type assetSubscriptionsDestroyResponse = assetSubscriptionsDestroyResponseComposite & {
  headers: Headers
}

export const getAssetSubscriptionsDestroyUrl = (uid: string) => {
  return `/api/v2/asset_subscriptions/${uid}/`
}

export const assetSubscriptionsDestroy = async (
  uid: string,
  options?: RequestInit,
): Promise<assetSubscriptionsDestroyResponse> => {
  return fetchWithAuth<assetSubscriptionsDestroyResponse>(getAssetSubscriptionsDestroyUrl(uid), {
    ...options,
    method: 'DELETE',
  })
}

export const getAssetSubscriptionsDestroyMutationOptions = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetSubscriptionsDestroy>>,
    TError,
    { uid: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<Awaited<ReturnType<typeof assetSubscriptionsDestroy>>, TError, { uid: string }, TContext> => {
  const mutationKey = ['assetSubscriptionsDestroy']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof assetSubscriptionsDestroy>>, { uid: string }> = (
    props,
  ) => {
    const { uid } = props ?? {}

    return assetSubscriptionsDestroy(uid, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetSubscriptionsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof assetSubscriptionsDestroy>>>

export type AssetSubscriptionsDestroyMutationError = ErrorObject

export const useAssetSubscriptionsDestroy = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetSubscriptionsDestroy>>,
    TError,
    { uid: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetSubscriptionsDestroyMutationOptions(options)

  return useMutation(mutationOptions)
}
