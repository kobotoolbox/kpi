/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { PaginatedProjectInviteResponseList } from '../models/paginatedProjectInviteResponseList'

import type { PatchedInviteUpdatePayload } from '../models/patchedInviteUpdatePayload'

import type { ProjectInviteCreatePayload } from '../models/projectInviteCreatePayload'

import type { ProjectInviteResponse } from '../models/projectInviteResponse'

import type { ProjectOwnershipInvitesListParams } from '../models/projectOwnershipInvitesListParams'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List of invites

Invites sent or received by current user about transferring project ownership.

List can be filtered with `mode` parameter,  e.g.: display only received invites.

Possible values for `mode`:
- `sender`
- `recipient`


 */
export type projectOwnershipInvitesListResponse200 = {
  data: PaginatedProjectInviteResponseList
  status: 200
}

export type projectOwnershipInvitesListResponse403 = {
  data: ErrorDetail
  status: 403
}

export type projectOwnershipInvitesListResponseComposite =
  | projectOwnershipInvitesListResponse200
  | projectOwnershipInvitesListResponse403

export type projectOwnershipInvitesListResponse = projectOwnershipInvitesListResponseComposite & {
  headers: Headers
}

export const getProjectOwnershipInvitesListUrl = (params?: ProjectOwnershipInvitesListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/project-ownership/invites/?${stringifiedParams}`
    : `/api/v2/project-ownership/invites/`
}

export const projectOwnershipInvitesList = async (
  params?: ProjectOwnershipInvitesListParams,
  options?: RequestInit,
): Promise<projectOwnershipInvitesListResponse> => {
  return fetchWithAuth<projectOwnershipInvitesListResponse>(getProjectOwnershipInvitesListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getProjectOwnershipInvitesListQueryKey = (params?: ProjectOwnershipInvitesListParams) => {
  return ['api', 'v2', 'project-ownership', 'invites', ...(params ? [params] : [])] as const
}

export const getProjectOwnershipInvitesListQueryOptions = <
  TData = Awaited<ReturnType<typeof projectOwnershipInvitesList>>,
  TError = ErrorDetail,
>(
  params?: ProjectOwnershipInvitesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectOwnershipInvitesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getProjectOwnershipInvitesListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof projectOwnershipInvitesList>>> = ({ signal }) =>
    projectOwnershipInvitesList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof projectOwnershipInvitesList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProjectOwnershipInvitesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof projectOwnershipInvitesList>>
>
export type ProjectOwnershipInvitesListQueryError = ErrorDetail

export function useProjectOwnershipInvitesList<
  TData = Awaited<ReturnType<typeof projectOwnershipInvitesList>>,
  TError = ErrorDetail,
>(
  params?: ProjectOwnershipInvitesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectOwnershipInvitesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProjectOwnershipInvitesListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Create (send) an invite

Where the assets `uid` are given in the payload's list



 */
export type projectOwnershipInvitesCreateResponse201 = {
  data: ProjectInviteResponse
  status: 201
}

export type projectOwnershipInvitesCreateResponse400 = {
  data: ErrorObject
  status: 400
}

export type projectOwnershipInvitesCreateResponse403 = {
  data: ErrorDetail
  status: 403
}

export type projectOwnershipInvitesCreateResponseComposite =
  | projectOwnershipInvitesCreateResponse201
  | projectOwnershipInvitesCreateResponse400
  | projectOwnershipInvitesCreateResponse403

export type projectOwnershipInvitesCreateResponse = projectOwnershipInvitesCreateResponseComposite & {
  headers: Headers
}

export const getProjectOwnershipInvitesCreateUrl = () => {
  return `/api/v2/project-ownership/invites/`
}

export const projectOwnershipInvitesCreate = async (
  projectInviteCreatePayload: ProjectInviteCreatePayload,
  options?: RequestInit,
): Promise<projectOwnershipInvitesCreateResponse> => {
  return fetchWithAuth<projectOwnershipInvitesCreateResponse>(getProjectOwnershipInvitesCreateUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(projectInviteCreatePayload),
  })
}

export const getProjectOwnershipInvitesCreateMutationOptions = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectOwnershipInvitesCreate>>,
    TError,
    { data: ProjectInviteCreatePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof projectOwnershipInvitesCreate>>,
  TError,
  { data: ProjectInviteCreatePayload },
  TContext
> => {
  const mutationKey = ['projectOwnershipInvitesCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof projectOwnershipInvitesCreate>>,
    { data: ProjectInviteCreatePayload }
  > = (props) => {
    const { data } = props ?? {}

    return projectOwnershipInvitesCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ProjectOwnershipInvitesCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof projectOwnershipInvitesCreate>>
>
export type ProjectOwnershipInvitesCreateMutationBody = ProjectInviteCreatePayload
export type ProjectOwnershipInvitesCreateMutationError = ErrorObject | ErrorDetail

export const useProjectOwnershipInvitesCreate = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectOwnershipInvitesCreate>>,
    TError,
    { data: ProjectInviteCreatePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getProjectOwnershipInvitesCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Invite detail

It can be useful to monitor the invite status while the transfer is being processed

 */
export type projectOwnershipInvitesRetrieveResponse200 = {
  data: ProjectInviteResponse
  status: 200
}

export type projectOwnershipInvitesRetrieveResponse403 = {
  data: ErrorDetail
  status: 403
}

export type projectOwnershipInvitesRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type projectOwnershipInvitesRetrieveResponseComposite =
  | projectOwnershipInvitesRetrieveResponse200
  | projectOwnershipInvitesRetrieveResponse403
  | projectOwnershipInvitesRetrieveResponse404

export type projectOwnershipInvitesRetrieveResponse = projectOwnershipInvitesRetrieveResponseComposite & {
  headers: Headers
}

export const getProjectOwnershipInvitesRetrieveUrl = (uid: string) => {
  return `/api/v2/project-ownership/invites/${uid}/`
}

export const projectOwnershipInvitesRetrieve = async (
  uid: string,
  options?: RequestInit,
): Promise<projectOwnershipInvitesRetrieveResponse> => {
  return fetchWithAuth<projectOwnershipInvitesRetrieveResponse>(getProjectOwnershipInvitesRetrieveUrl(uid), {
    ...options,
    method: 'GET',
  })
}

export const getProjectOwnershipInvitesRetrieveQueryKey = (uid: string) => {
  return ['api', 'v2', 'project-ownership', 'invites', uid] as const
}

export const getProjectOwnershipInvitesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof projectOwnershipInvitesRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectOwnershipInvitesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getProjectOwnershipInvitesRetrieveQueryKey(uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof projectOwnershipInvitesRetrieve>>> = ({ signal }) =>
    projectOwnershipInvitesRetrieve(uid, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!uid, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof projectOwnershipInvitesRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProjectOwnershipInvitesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof projectOwnershipInvitesRetrieve>>
>
export type ProjectOwnershipInvitesRetrieveQueryError = ErrorDetail | ErrorObject

export function useProjectOwnershipInvitesRetrieve<
  TData = Awaited<ReturnType<typeof projectOwnershipInvitesRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectOwnershipInvitesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProjectOwnershipInvitesRetrieveQueryOptions(uid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Update an invite status

Update the status of an invite.
Status accepted:
- `cancelled`
- `accepted`
- `declined`

**Notes**:
- _When submitting `accepted` the invite status becomes automatically `in_progress`_
- _Only the sender can cancel an invite, and **if only if** the invite is still pending._
- _Only the recipient can accept or decline, **if and only if** the invite is still pending._


 */
export type projectOwnershipInvitesPartialUpdateResponse200 = {
  data: ProjectInviteResponse
  status: 200
}

export type projectOwnershipInvitesPartialUpdateResponse400 = {
  data: ErrorObject
  status: 400
}

export type projectOwnershipInvitesPartialUpdateResponse403 = {
  data: ErrorDetail
  status: 403
}

export type projectOwnershipInvitesPartialUpdateResponseComposite =
  | projectOwnershipInvitesPartialUpdateResponse200
  | projectOwnershipInvitesPartialUpdateResponse400
  | projectOwnershipInvitesPartialUpdateResponse403

export type projectOwnershipInvitesPartialUpdateResponse = projectOwnershipInvitesPartialUpdateResponseComposite & {
  headers: Headers
}

export const getProjectOwnershipInvitesPartialUpdateUrl = (uid: string) => {
  return `/api/v2/project-ownership/invites/${uid}/`
}

export const projectOwnershipInvitesPartialUpdate = async (
  uid: string,
  patchedInviteUpdatePayload: PatchedInviteUpdatePayload,
  options?: RequestInit,
): Promise<projectOwnershipInvitesPartialUpdateResponse> => {
  return fetchWithAuth<projectOwnershipInvitesPartialUpdateResponse>(getProjectOwnershipInvitesPartialUpdateUrl(uid), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(patchedInviteUpdatePayload),
  })
}

export const getProjectOwnershipInvitesPartialUpdateMutationOptions = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectOwnershipInvitesPartialUpdate>>,
    TError,
    { uid: string; data: PatchedInviteUpdatePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof projectOwnershipInvitesPartialUpdate>>,
  TError,
  { uid: string; data: PatchedInviteUpdatePayload },
  TContext
> => {
  const mutationKey = ['projectOwnershipInvitesPartialUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof projectOwnershipInvitesPartialUpdate>>,
    { uid: string; data: PatchedInviteUpdatePayload }
  > = (props) => {
    const { uid, data } = props ?? {}

    return projectOwnershipInvitesPartialUpdate(uid, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ProjectOwnershipInvitesPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof projectOwnershipInvitesPartialUpdate>>
>
export type ProjectOwnershipInvitesPartialUpdateMutationBody = PatchedInviteUpdatePayload
export type ProjectOwnershipInvitesPartialUpdateMutationError = ErrorObject | ErrorDetail

export const useProjectOwnershipInvitesPartialUpdate = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectOwnershipInvitesPartialUpdate>>,
    TError,
    { uid: string; data: PatchedInviteUpdatePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getProjectOwnershipInvitesPartialUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Delete invite

 */
export type projectOwnershipInvitesDestroyResponse204 = {
  data: void
  status: 204
}

export type projectOwnershipInvitesDestroyResponse403 = {
  data: ErrorDetail
  status: 403
}

export type projectOwnershipInvitesDestroyResponse404 = {
  data: ErrorObject
  status: 404
}

export type projectOwnershipInvitesDestroyResponseComposite =
  | projectOwnershipInvitesDestroyResponse204
  | projectOwnershipInvitesDestroyResponse403
  | projectOwnershipInvitesDestroyResponse404

export type projectOwnershipInvitesDestroyResponse = projectOwnershipInvitesDestroyResponseComposite & {
  headers: Headers
}

export const getProjectOwnershipInvitesDestroyUrl = (uid: string) => {
  return `/api/v2/project-ownership/invites/${uid}/`
}

export const projectOwnershipInvitesDestroy = async (
  uid: string,
  options?: RequestInit,
): Promise<projectOwnershipInvitesDestroyResponse> => {
  return fetchWithAuth<projectOwnershipInvitesDestroyResponse>(getProjectOwnershipInvitesDestroyUrl(uid), {
    ...options,
    method: 'DELETE',
  })
}

export const getProjectOwnershipInvitesDestroyMutationOptions = <
  TError = ErrorDetail | ErrorObject,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectOwnershipInvitesDestroy>>,
    TError,
    { uid: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof projectOwnershipInvitesDestroy>>,
  TError,
  { uid: string },
  TContext
> => {
  const mutationKey = ['projectOwnershipInvitesDestroy']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof projectOwnershipInvitesDestroy>>, { uid: string }> = (
    props,
  ) => {
    const { uid } = props ?? {}

    return projectOwnershipInvitesDestroy(uid, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ProjectOwnershipInvitesDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof projectOwnershipInvitesDestroy>>
>

export type ProjectOwnershipInvitesDestroyMutationError = ErrorDetail | ErrorObject

export const useProjectOwnershipInvitesDestroy = <TError = ErrorDetail | ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectOwnershipInvitesDestroy>>,
    TError,
    { uid: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getProjectOwnershipInvitesDestroyMutationOptions(options)

  return useMutation(mutationOptions)
}
