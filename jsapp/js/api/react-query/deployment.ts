/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { DeploymentCreateRequest } from '../models/deploymentCreateRequest'

import type { DeploymentResponse } from '../models/deploymentResponse'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { PatchedDeploymentPatchRequest } from '../models/patchedDeploymentPatchRequest'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## Retrieve the existing deployment (if any)

 */
export type assetsDeploymentRetrieveResponse200 = {
  data: DeploymentResponse
  status: 200
}

export type assetsDeploymentRetrieveResponse404 = {
  data: ErrorDetail
  status: 404
}

export type assetsDeploymentRetrieveResponseComposite =
  | assetsDeploymentRetrieveResponse200
  | assetsDeploymentRetrieveResponse404

export type assetsDeploymentRetrieveResponse = assetsDeploymentRetrieveResponseComposite & {
  headers: Headers
}

export const getAssetsDeploymentRetrieveUrl = (uid: string) => {
  return `/api/v2/assets/${uid}/deployment/`
}

export const assetsDeploymentRetrieve = async (
  uid: string,
  options?: RequestInit,
): Promise<assetsDeploymentRetrieveResponse> => {
  return fetchWithAuth<assetsDeploymentRetrieveResponse>(getAssetsDeploymentRetrieveUrl(uid), {
    ...options,
    method: 'GET',
  })
}

export const getAssetsDeploymentRetrieveQueryKey = (uid: string) => {
  return ['api', 'v2', 'assets', uid, 'deployment'] as const
}

export const getAssetsDeploymentRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsDeploymentRetrieve>>,
  TError = ErrorDetail,
>(
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsDeploymentRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetsDeploymentRetrieveQueryKey(uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsDeploymentRetrieve>>> = ({ signal }) =>
    assetsDeploymentRetrieve(uid, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!uid, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsDeploymentRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsDeploymentRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof assetsDeploymentRetrieve>>>
export type AssetsDeploymentRetrieveQueryError = ErrorDetail

export function useAssetsDeploymentRetrieve<
  TData = Awaited<ReturnType<typeof assetsDeploymentRetrieve>>,
  TError = ErrorDetail,
>(
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsDeploymentRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsDeploymentRetrieveQueryOptions(uid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## (Re)Deploy a form

Deploy a new form or re-deploy an existing one.

 */
export type assetsDeploymentCreateResponse200 = {
  data: DeploymentResponse
  status: 200
}

export type assetsDeploymentCreateResponse400 = {
  data: ErrorObject
  status: 400
}

export type assetsDeploymentCreateResponse401 = {
  data: ErrorDetail
  status: 401
}

export type assetsDeploymentCreateResponseComposite =
  | assetsDeploymentCreateResponse200
  | assetsDeploymentCreateResponse400
  | assetsDeploymentCreateResponse401

export type assetsDeploymentCreateResponse = assetsDeploymentCreateResponseComposite & {
  headers: Headers
}

export const getAssetsDeploymentCreateUrl = (uid: string) => {
  return `/api/v2/assets/${uid}/deployment/`
}

export const assetsDeploymentCreate = async (
  uid: string,
  deploymentCreateRequest: DeploymentCreateRequest,
  options?: RequestInit,
): Promise<assetsDeploymentCreateResponse> => {
  return fetchWithAuth<assetsDeploymentCreateResponse>(getAssetsDeploymentCreateUrl(uid), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(deploymentCreateRequest),
  })
}

export const getAssetsDeploymentCreateMutationOptions = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsDeploymentCreate>>,
    TError,
    { uid: string; data: DeploymentCreateRequest },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsDeploymentCreate>>,
  TError,
  { uid: string; data: DeploymentCreateRequest },
  TContext
> => {
  const mutationKey = ['assetsDeploymentCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsDeploymentCreate>>,
    { uid: string; data: DeploymentCreateRequest }
  > = (props) => {
    const { uid, data } = props ?? {}

    return assetsDeploymentCreate(uid, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetsDeploymentCreateMutationResult = NonNullable<Awaited<ReturnType<typeof assetsDeploymentCreate>>>
export type AssetsDeploymentCreateMutationBody = DeploymentCreateRequest
export type AssetsDeploymentCreateMutationError = ErrorObject | ErrorDetail

export const useAssetsDeploymentCreate = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsDeploymentCreate>>,
    TError,
    { uid: string; data: DeploymentCreateRequest },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetsDeploymentCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## (Un)Archive the existing deployment.

Update the `active` field of the existing deployment.

To overwrite the entire deployment (including the form contents), use a PUT request.

 */
export type assetsDeploymentPartialUpdateResponse200 = {
  data: DeploymentResponse
  status: 200
}

export type assetsDeploymentPartialUpdateResponse400 = {
  data: ErrorObject
  status: 400
}

export type assetsDeploymentPartialUpdateResponse401 = {
  data: ErrorDetail
  status: 401
}

export type assetsDeploymentPartialUpdateResponseComposite =
  | assetsDeploymentPartialUpdateResponse200
  | assetsDeploymentPartialUpdateResponse400
  | assetsDeploymentPartialUpdateResponse401

export type assetsDeploymentPartialUpdateResponse = assetsDeploymentPartialUpdateResponseComposite & {
  headers: Headers
}

export const getAssetsDeploymentPartialUpdateUrl = (uid: string) => {
  return `/api/v2/assets/${uid}/deployment/`
}

export const assetsDeploymentPartialUpdate = async (
  uid: string,
  patchedDeploymentPatchRequest: PatchedDeploymentPatchRequest,
  options?: RequestInit,
): Promise<assetsDeploymentPartialUpdateResponse> => {
  return fetchWithAuth<assetsDeploymentPartialUpdateResponse>(getAssetsDeploymentPartialUpdateUrl(uid), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(patchedDeploymentPatchRequest),
  })
}

export const getAssetsDeploymentPartialUpdateMutationOptions = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsDeploymentPartialUpdate>>,
    TError,
    { uid: string; data: PatchedDeploymentPatchRequest },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsDeploymentPartialUpdate>>,
  TError,
  { uid: string; data: PatchedDeploymentPatchRequest },
  TContext
> => {
  const mutationKey = ['assetsDeploymentPartialUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsDeploymentPartialUpdate>>,
    { uid: string; data: PatchedDeploymentPatchRequest }
  > = (props) => {
    const { uid, data } = props ?? {}

    return assetsDeploymentPartialUpdate(uid, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetsDeploymentPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsDeploymentPartialUpdate>>
>
export type AssetsDeploymentPartialUpdateMutationBody = PatchedDeploymentPatchRequest
export type AssetsDeploymentPartialUpdateMutationError = ErrorObject | ErrorDetail

export const useAssetsDeploymentPartialUpdate = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsDeploymentPartialUpdate>>,
    TError,
    { uid: string; data: PatchedDeploymentPatchRequest },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetsDeploymentPartialUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
