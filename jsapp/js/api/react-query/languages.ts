/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { Language } from '../models/language'

import type { LanguagesListParams } from '../models/languagesListParams'

import type { PaginatedLanguageListList } from '../models/paginatedLanguageListList'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List the languages accessible to requesting (authenticated) user.

Search can be made with `q` parameter. By default, search for the term in language names or language codes.

Examples:
```shell
  curl -X GET https://kf.kobotoolbox.org/api/v2/languages/?q=fr
```

Complex searches can be done on other fields, such as `transcription_services` and `translation_services`.

Examples:
```shell
  curl -X GET https://kf.kobotoolbox.org/api/v2/languages/?q=transcription_services__code:goog AND translation_services__code:goog
```

Results are order by `featured` first (descending order), then by their name.

 */
export type languagesListResponse200 = {
  data: PaginatedLanguageListList
  status: 200
}

export type languagesListResponse401 = {
  data: ErrorDetail
  status: 401
}

export type languagesListResponseComposite = languagesListResponse200 | languagesListResponse401

export type languagesListResponse = languagesListResponseComposite & {
  headers: Headers
}

export const getLanguagesListUrl = (params?: LanguagesListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ? `/api/v2/languages/?${stringifiedParams}` : `/api/v2/languages/`
}

export const languagesList = async (
  params?: LanguagesListParams,
  options?: RequestInit,
): Promise<languagesListResponse> => {
  return fetchWithAuth<languagesListResponse>(getLanguagesListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getLanguagesListQueryKey = (params?: LanguagesListParams) => {
  return ['api', 'v2', 'languages', ...(params ? [params] : [])] as const
}

export const getLanguagesListQueryOptions = <TData = Awaited<ReturnType<typeof languagesList>>, TError = ErrorDetail>(
  params?: LanguagesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof languagesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLanguagesListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof languagesList>>> = ({ signal }) =>
    languagesList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof languagesList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type LanguagesListQueryResult = NonNullable<Awaited<ReturnType<typeof languagesList>>>
export type LanguagesListQueryError = ErrorDetail

export function useLanguagesList<TData = Awaited<ReturnType<typeof languagesList>>, TError = ErrorDetail>(
  params?: LanguagesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof languagesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getLanguagesListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve one language

* `code` - is the unique identifier of a specific language

 */
export type languagesRetrieveResponse200 = {
  data: Language
  status: 200
}

export type languagesRetrieveResponse401 = {
  data: ErrorDetail
  status: 401
}

export type languagesRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type languagesRetrieveResponseComposite =
  | languagesRetrieveResponse200
  | languagesRetrieveResponse401
  | languagesRetrieveResponse404

export type languagesRetrieveResponse = languagesRetrieveResponseComposite & {
  headers: Headers
}

export const getLanguagesRetrieveUrl = (code: string) => {
  return `/api/v2/languages/${code}/`
}

export const languagesRetrieve = async (code: string, options?: RequestInit): Promise<languagesRetrieveResponse> => {
  return fetchWithAuth<languagesRetrieveResponse>(getLanguagesRetrieveUrl(code), {
    ...options,
    method: 'GET',
  })
}

export const getLanguagesRetrieveQueryKey = (code: string) => {
  return ['api', 'v2', 'languages', code] as const
}

export const getLanguagesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof languagesRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof languagesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLanguagesRetrieveQueryKey(code)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof languagesRetrieve>>> = ({ signal }) =>
    languagesRetrieve(code, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof languagesRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type LanguagesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof languagesRetrieve>>>
export type LanguagesRetrieveQueryError = ErrorDetail | ErrorObject

export function useLanguagesRetrieve<
  TData = Awaited<ReturnType<typeof languagesRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof languagesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getLanguagesRetrieveQueryOptions(code, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
