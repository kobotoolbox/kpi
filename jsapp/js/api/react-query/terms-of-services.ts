/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { TermsOfServiceResponse } from '../models/termsOfServiceResponse'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List the different terms of service

 */
export type termsOfServiceListResponse200 = {
  data: TermsOfServiceResponse[]
  status: 200
}

export type termsOfServiceListResponse401 = {
  data: ErrorDetail
  status: 401
}

export type termsOfServiceListResponseComposite = termsOfServiceListResponse200 | termsOfServiceListResponse401

export type termsOfServiceListResponse = termsOfServiceListResponseComposite & {
  headers: Headers
}

export const getTermsOfServiceListUrl = () => {
  return `/api/v2/terms-of-service/`
}

export const termsOfServiceList = async (options?: RequestInit): Promise<termsOfServiceListResponse> => {
  return fetchWithAuth<termsOfServiceListResponse>(getTermsOfServiceListUrl(), {
    ...options,
    method: 'GET',
  })
}

export const getTermsOfServiceListQueryKey = () => {
  return ['api', 'v2', 'terms-of-service'] as const
}

export const getTermsOfServiceListQueryOptions = <
  TData = Awaited<ReturnType<typeof termsOfServiceList>>,
  TError = ErrorDetail,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof termsOfServiceList>>, TError, TData>
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTermsOfServiceListQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof termsOfServiceList>>> = ({ signal }) =>
    termsOfServiceList({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof termsOfServiceList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type TermsOfServiceListQueryResult = NonNullable<Awaited<ReturnType<typeof termsOfServiceList>>>
export type TermsOfServiceListQueryError = ErrorDetail

export function useTermsOfServiceList<
  TData = Awaited<ReturnType<typeof termsOfServiceList>>,
  TError = ErrorDetail,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof termsOfServiceList>>, TError, TData>
  request?: SecondParameter<typeof fetchWithAuth>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTermsOfServiceListQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve a specific terms of service

 */
export type termsOfServiceRetrieveResponse200 = {
  data: TermsOfServiceResponse
  status: 200
}

export type termsOfServiceRetrieveResponse401 = {
  data: ErrorDetail
  status: 401
}

export type termsOfServiceRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type termsOfServiceRetrieveResponseComposite =
  | termsOfServiceRetrieveResponse200
  | termsOfServiceRetrieveResponse401
  | termsOfServiceRetrieveResponse404

export type termsOfServiceRetrieveResponse = termsOfServiceRetrieveResponseComposite & {
  headers: Headers
}

export const getTermsOfServiceRetrieveUrl = (slug: string) => {
  return `/api/v2/terms-of-service/${slug}/`
}

export const termsOfServiceRetrieve = async (
  slug: string,
  options?: RequestInit,
): Promise<termsOfServiceRetrieveResponse> => {
  return fetchWithAuth<termsOfServiceRetrieveResponse>(getTermsOfServiceRetrieveUrl(slug), {
    ...options,
    method: 'GET',
  })
}

export const getTermsOfServiceRetrieveQueryKey = (slug: string) => {
  return ['api', 'v2', 'terms-of-service', slug] as const
}

export const getTermsOfServiceRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof termsOfServiceRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  slug: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof termsOfServiceRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTermsOfServiceRetrieveQueryKey(slug)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof termsOfServiceRetrieve>>> = ({ signal }) =>
    termsOfServiceRetrieve(slug, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!slug, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof termsOfServiceRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type TermsOfServiceRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof termsOfServiceRetrieve>>>
export type TermsOfServiceRetrieveQueryError = ErrorDetail | ErrorObject

export function useTermsOfServiceRetrieve<
  TData = Awaited<ReturnType<typeof termsOfServiceRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  slug: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof termsOfServiceRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTermsOfServiceRetrieveQueryOptions(slug, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
