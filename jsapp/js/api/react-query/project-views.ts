/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { PaginatedProjectViewAssetResponseList } from '../models/paginatedProjectViewAssetResponseList'

import type { PaginatedProjectViewListResponseList } from '../models/paginatedProjectViewListResponseList'

import type { PaginatedProjectViewUserResponseList } from '../models/paginatedProjectViewUserResponseList'

import type { ProjectViewExportCreateResponse } from '../models/projectViewExportCreateResponse'

import type { ProjectViewExportResponse } from '../models/projectViewExportResponse'

import type { ProjectViewListResponse } from '../models/projectViewListResponse'

import type { ProjectViewsAssetsRetrieveParams } from '../models/projectViewsAssetsRetrieveParams'

import type { ProjectViewsListParams } from '../models/projectViewsListParams'

import type { ProjectViewsUsersRetrieveParams } from '../models/projectViewsUsersRetrieveParams'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List project views for current user

 */
export type projectViewsListResponse200 = {
  data: PaginatedProjectViewListResponseList
  status: 200
}

export type projectViewsListResponse403 = {
  data: ErrorDetail
  status: 403
}

export type projectViewsListResponseComposite = projectViewsListResponse200 | projectViewsListResponse403

export type projectViewsListResponse = projectViewsListResponseComposite & {
  headers: Headers
}

export const getProjectViewsListUrl = (params?: ProjectViewsListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ? `/api/v2/project-views/?${stringifiedParams}` : `/api/v2/project-views/`
}

export const projectViewsList = async (
  params?: ProjectViewsListParams,
  options?: RequestInit,
): Promise<projectViewsListResponse> => {
  return fetchWithAuth<projectViewsListResponse>(getProjectViewsListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getProjectViewsListQueryKey = (params?: ProjectViewsListParams) => {
  return ['api', 'v2', 'project-views', ...(params ? [params] : [])] as const
}

export const getProjectViewsListQueryOptions = <
  TData = Awaited<ReturnType<typeof projectViewsList>>,
  TError = ErrorDetail,
>(
  params?: ProjectViewsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectViewsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getProjectViewsListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof projectViewsList>>> = ({ signal }) =>
    projectViewsList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof projectViewsList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProjectViewsListQueryResult = NonNullable<Awaited<ReturnType<typeof projectViewsList>>>
export type ProjectViewsListQueryError = ErrorDetail

export function useProjectViewsList<TData = Awaited<ReturnType<typeof projectViewsList>>, TError = ErrorDetail>(
  params?: ProjectViewsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectViewsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProjectViewsListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve project view of a shared project to current user

 */
export type projectViewsRetrieveResponse200 = {
  data: ProjectViewListResponse
  status: 200
}

export type projectViewsRetrieveResponse403 = {
  data: ErrorDetail
  status: 403
}

export type projectViewsRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type projectViewsRetrieveResponseComposite =
  | projectViewsRetrieveResponse200
  | projectViewsRetrieveResponse403
  | projectViewsRetrieveResponse404

export type projectViewsRetrieveResponse = projectViewsRetrieveResponseComposite & {
  headers: Headers
}

export const getProjectViewsRetrieveUrl = (uid: string) => {
  return `/api/v2/project-views/${uid}/`
}

export const projectViewsRetrieve = async (
  uid: string,
  options?: RequestInit,
): Promise<projectViewsRetrieveResponse> => {
  return fetchWithAuth<projectViewsRetrieveResponse>(getProjectViewsRetrieveUrl(uid), {
    ...options,
    method: 'GET',
  })
}

export const getProjectViewsRetrieveQueryKey = (uid: string) => {
  return ['api', 'v2', 'project-views', uid] as const
}

export const getProjectViewsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof projectViewsRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectViewsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getProjectViewsRetrieveQueryKey(uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof projectViewsRetrieve>>> = ({ signal }) =>
    projectViewsRetrieve(uid, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!uid, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof projectViewsRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProjectViewsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof projectViewsRetrieve>>>
export type ProjectViewsRetrieveQueryError = ErrorDetail | ErrorObject

export function useProjectViewsRetrieve<
  TData = Awaited<ReturnType<typeof projectViewsRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectViewsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProjectViewsRetrieveQueryOptions(uid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve an export for the requested object

* Note: `{obj_type}` can either be `users` or `assets`


 */
export type projectViewsExportRetrieveResponse200 = {
  data: ProjectViewExportResponse
  status: 200
}

export type projectViewsExportRetrieveResponse400 = {
  data: ErrorObject
  status: 400
}

export type projectViewsExportRetrieveResponse401 = {
  data: ErrorDetail
  status: 401
}

export type projectViewsExportRetrieveResponseComposite =
  | projectViewsExportRetrieveResponse200
  | projectViewsExportRetrieveResponse400
  | projectViewsExportRetrieveResponse401

export type projectViewsExportRetrieveResponse = projectViewsExportRetrieveResponseComposite & {
  headers: Headers
}

export const getProjectViewsExportRetrieveUrl = (uid: string, objType: string) => {
  return `/api/v2/project-views/${uid}/${objType}/export/`
}

export const projectViewsExportRetrieve = async (
  uid: string,
  objType: string,
  options?: RequestInit,
): Promise<projectViewsExportRetrieveResponse> => {
  return fetchWithAuth<projectViewsExportRetrieveResponse>(getProjectViewsExportRetrieveUrl(uid, objType), {
    ...options,
    method: 'GET',
  })
}

export const getProjectViewsExportRetrieveQueryKey = (uid: string, objType: string) => {
  return ['api', 'v2', 'project-views', uid, objType, 'export'] as const
}

export const getProjectViewsExportRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof projectViewsExportRetrieve>>,
  TError = ErrorObject | ErrorDetail,
>(
  uid: string,
  objType: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectViewsExportRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getProjectViewsExportRetrieveQueryKey(uid, objType)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof projectViewsExportRetrieve>>> = ({ signal }) =>
    projectViewsExportRetrieve(uid, objType, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!(uid && objType), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof projectViewsExportRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProjectViewsExportRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof projectViewsExportRetrieve>>>
export type ProjectViewsExportRetrieveQueryError = ErrorObject | ErrorDetail

export function useProjectViewsExportRetrieve<
  TData = Awaited<ReturnType<typeof projectViewsExportRetrieve>>,
  TError = ErrorObject | ErrorDetail,
>(
  uid: string,
  objType: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectViewsExportRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProjectViewsExportRetrieveQueryOptions(uid, objType, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Create an export for the requested object

* Note: `{obj_type}` can either be `users` or `assets`

 */
export type projectViewsExportCreateResponse200 = {
  data: ProjectViewExportCreateResponse
  status: 200
}

export type projectViewsExportCreateResponse400 = {
  data: ErrorObject
  status: 400
}

export type projectViewsExportCreateResponse401 = {
  data: ErrorDetail
  status: 401
}

export type projectViewsExportCreateResponseComposite =
  | projectViewsExportCreateResponse200
  | projectViewsExportCreateResponse400
  | projectViewsExportCreateResponse401

export type projectViewsExportCreateResponse = projectViewsExportCreateResponseComposite & {
  headers: Headers
}

export const getProjectViewsExportCreateUrl = (uid: string, objType: string) => {
  return `/api/v2/project-views/${uid}/${objType}/export/`
}

export const projectViewsExportCreate = async (
  uid: string,
  objType: string,
  options?: RequestInit,
): Promise<projectViewsExportCreateResponse> => {
  return fetchWithAuth<projectViewsExportCreateResponse>(getProjectViewsExportCreateUrl(uid, objType), {
    ...options,
    method: 'POST',
  })
}

export const getProjectViewsExportCreateMutationOptions = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectViewsExportCreate>>,
    TError,
    { uid: string; objType: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof projectViewsExportCreate>>,
  TError,
  { uid: string; objType: string },
  TContext
> => {
  const mutationKey = ['projectViewsExportCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof projectViewsExportCreate>>,
    { uid: string; objType: string }
  > = (props) => {
    const { uid, objType } = props ?? {}

    return projectViewsExportCreate(uid, objType, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ProjectViewsExportCreateMutationResult = NonNullable<Awaited<ReturnType<typeof projectViewsExportCreate>>>

export type ProjectViewsExportCreateMutationError = ErrorObject | ErrorDetail

export const useProjectViewsExportCreate = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof projectViewsExportCreate>>,
    TError,
    { uid: string; objType: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getProjectViewsExportCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Retrieve assets available in project view

 */
export type projectViewsAssetsRetrieveResponse200 = {
  data: PaginatedProjectViewAssetResponseList
  status: 200
}

export type projectViewsAssetsRetrieveResponse400 = {
  data: ErrorObject
  status: 400
}

export type projectViewsAssetsRetrieveResponse401 = {
  data: ErrorDetail
  status: 401
}

export type projectViewsAssetsRetrieveResponseComposite =
  | projectViewsAssetsRetrieveResponse200
  | projectViewsAssetsRetrieveResponse400
  | projectViewsAssetsRetrieveResponse401

export type projectViewsAssetsRetrieveResponse = projectViewsAssetsRetrieveResponseComposite & {
  headers: Headers
}

export const getProjectViewsAssetsRetrieveUrl = (uid: string, params?: ProjectViewsAssetsRetrieveParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/project-views/${uid}/assets/?${stringifiedParams}`
    : `/api/v2/project-views/${uid}/assets/`
}

export const projectViewsAssetsRetrieve = async (
  uid: string,
  params?: ProjectViewsAssetsRetrieveParams,
  options?: RequestInit,
): Promise<projectViewsAssetsRetrieveResponse> => {
  return fetchWithAuth<projectViewsAssetsRetrieveResponse>(getProjectViewsAssetsRetrieveUrl(uid, params), {
    ...options,
    method: 'GET',
  })
}

export const getProjectViewsAssetsRetrieveQueryKey = (uid: string, params?: ProjectViewsAssetsRetrieveParams) => {
  return ['api', 'v2', 'project-views', uid, 'assets', ...(params ? [params] : [])] as const
}

export const getProjectViewsAssetsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof projectViewsAssetsRetrieve>>,
  TError = ErrorObject | ErrorDetail,
>(
  uid: string,
  params?: ProjectViewsAssetsRetrieveParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectViewsAssetsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getProjectViewsAssetsRetrieveQueryKey(uid, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof projectViewsAssetsRetrieve>>> = ({ signal }) =>
    projectViewsAssetsRetrieve(uid, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!uid, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof projectViewsAssetsRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProjectViewsAssetsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof projectViewsAssetsRetrieve>>>
export type ProjectViewsAssetsRetrieveQueryError = ErrorObject | ErrorDetail

export function useProjectViewsAssetsRetrieve<
  TData = Awaited<ReturnType<typeof projectViewsAssetsRetrieve>>,
  TError = ErrorObject | ErrorDetail,
>(
  uid: string,
  params?: ProjectViewsAssetsRetrieveParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectViewsAssetsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProjectViewsAssetsRetrieveQueryOptions(uid, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve users available in project view

 */
export type projectViewsUsersRetrieveResponse200 = {
  data: PaginatedProjectViewUserResponseList
  status: 200
}

export type projectViewsUsersRetrieveResponse403 = {
  data: ErrorDetail
  status: 403
}

export type projectViewsUsersRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type projectViewsUsersRetrieveResponseComposite =
  | projectViewsUsersRetrieveResponse200
  | projectViewsUsersRetrieveResponse403
  | projectViewsUsersRetrieveResponse404

export type projectViewsUsersRetrieveResponse = projectViewsUsersRetrieveResponseComposite & {
  headers: Headers
}

export const getProjectViewsUsersRetrieveUrl = (uid: string, params?: ProjectViewsUsersRetrieveParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/project-views/${uid}/users/?${stringifiedParams}`
    : `/api/v2/project-views/${uid}/users/`
}

export const projectViewsUsersRetrieve = async (
  uid: string,
  params?: ProjectViewsUsersRetrieveParams,
  options?: RequestInit,
): Promise<projectViewsUsersRetrieveResponse> => {
  return fetchWithAuth<projectViewsUsersRetrieveResponse>(getProjectViewsUsersRetrieveUrl(uid, params), {
    ...options,
    method: 'GET',
  })
}

export const getProjectViewsUsersRetrieveQueryKey = (uid: string, params?: ProjectViewsUsersRetrieveParams) => {
  return ['api', 'v2', 'project-views', uid, 'users', ...(params ? [params] : [])] as const
}

export const getProjectViewsUsersRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof projectViewsUsersRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  uid: string,
  params?: ProjectViewsUsersRetrieveParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectViewsUsersRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getProjectViewsUsersRetrieveQueryKey(uid, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof projectViewsUsersRetrieve>>> = ({ signal }) =>
    projectViewsUsersRetrieve(uid, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!uid, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof projectViewsUsersRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProjectViewsUsersRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof projectViewsUsersRetrieve>>>
export type ProjectViewsUsersRetrieveQueryError = ErrorDetail | ErrorObject

export function useProjectViewsUsersRetrieve<
  TData = Awaited<ReturnType<typeof projectViewsUsersRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  uid: string,
  params?: ProjectViewsUsersRetrieveParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectViewsUsersRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProjectViewsUsersRetrieveQueryOptions(uid, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
