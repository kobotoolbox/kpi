/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { PaginatedTranscriptionServiceList } from '../models/paginatedTranscriptionServiceList'

import type { TranscriptionService } from '../models/transcriptionService'

import type { TranscriptionServicesListParams } from '../models/transcriptionServicesListParams'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List the transcription services accessible to requesting user.

Search can be made with `q` parameter to search for the term in names and codes.

Results are order by name.

 */
export type transcriptionServicesListResponse200 = {
  data: PaginatedTranscriptionServiceList
  status: 200
}

export type transcriptionServicesListResponse401 = {
  data: ErrorDetail
  status: 401
}

export type transcriptionServicesListResponseComposite =
  | transcriptionServicesListResponse200
  | transcriptionServicesListResponse401

export type transcriptionServicesListResponse = transcriptionServicesListResponseComposite & {
  headers: Headers
}

export const getTranscriptionServicesListUrl = (params?: TranscriptionServicesListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/transcription-services/?${stringifiedParams}`
    : `/api/v2/transcription-services/`
}

export const transcriptionServicesList = async (
  params?: TranscriptionServicesListParams,
  options?: RequestInit,
): Promise<transcriptionServicesListResponse> => {
  return fetchWithAuth<transcriptionServicesListResponse>(getTranscriptionServicesListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getTranscriptionServicesListQueryKey = (params?: TranscriptionServicesListParams) => {
  return ['api', 'v2', 'transcription-services', ...(params ? [params] : [])] as const
}

export const getTranscriptionServicesListQueryOptions = <
  TData = Awaited<ReturnType<typeof transcriptionServicesList>>,
  TError = ErrorDetail,
>(
  params?: TranscriptionServicesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof transcriptionServicesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTranscriptionServicesListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof transcriptionServicesList>>> = ({ signal }) =>
    transcriptionServicesList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof transcriptionServicesList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type TranscriptionServicesListQueryResult = NonNullable<Awaited<ReturnType<typeof transcriptionServicesList>>>
export type TranscriptionServicesListQueryError = ErrorDetail

export function useTranscriptionServicesList<
  TData = Awaited<ReturnType<typeof transcriptionServicesList>>,
  TError = ErrorDetail,
>(
  params?: TranscriptionServicesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof transcriptionServicesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTranscriptionServicesListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## retrieve a transcription service

* `code` - is the unique identifier of a specific language

 */
export type transcriptionServicesRetrieveResponse200 = {
  data: TranscriptionService
  status: 200
}

export type transcriptionServicesRetrieveResponse401 = {
  data: ErrorDetail
  status: 401
}

export type transcriptionServicesRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type transcriptionServicesRetrieveResponseComposite =
  | transcriptionServicesRetrieveResponse200
  | transcriptionServicesRetrieveResponse401
  | transcriptionServicesRetrieveResponse404

export type transcriptionServicesRetrieveResponse = transcriptionServicesRetrieveResponseComposite & {
  headers: Headers
}

export const getTranscriptionServicesRetrieveUrl = (code: string) => {
  return `/api/v2/transcription-services/${code}/`
}

export const transcriptionServicesRetrieve = async (
  code: string,
  options?: RequestInit,
): Promise<transcriptionServicesRetrieveResponse> => {
  return fetchWithAuth<transcriptionServicesRetrieveResponse>(getTranscriptionServicesRetrieveUrl(code), {
    ...options,
    method: 'GET',
  })
}

export const getTranscriptionServicesRetrieveQueryKey = (code: string) => {
  return ['api', 'v2', 'transcription-services', code] as const
}

export const getTranscriptionServicesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof transcriptionServicesRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof transcriptionServicesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTranscriptionServicesRetrieveQueryKey(code)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof transcriptionServicesRetrieve>>> = ({ signal }) =>
    transcriptionServicesRetrieve(code, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!code, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof transcriptionServicesRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type TranscriptionServicesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof transcriptionServicesRetrieve>>
>
export type TranscriptionServicesRetrieveQueryError = ErrorDetail | ErrorObject

export function useTranscriptionServicesRetrieve<
  TData = Awaited<ReturnType<typeof transcriptionServicesRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  code: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof transcriptionServicesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTranscriptionServicesRetrieveQueryOptions(code, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
