/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { ServiceUsageResponse } from '../models/serviceUsageResponse'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * <span class='label label-warning'>‚ö†Ô∏è Deprecated</span>
## Track Service Usage

Tracks the total usage of different services for the logged-in user. </br>
Tracks the submissions and NLP seconds/characters for the current month/year/all time. </br>
Tracks the current total storage used. </br>
Note: this endpoint is not currently used by the frontend to display usage information. </br>
See `/api/v2/organizations/{organization_id}/service_usage/` for the endpoint we use on the Usage page. </br>

 */
export type serviceUsageListResponse200 = {
  data: ServiceUsageResponse[]
  status: 200
}

export type serviceUsageListResponse401 = {
  data: ErrorDetail
  status: 401
}

export type serviceUsageListResponseComposite = serviceUsageListResponse200 | serviceUsageListResponse401

export type serviceUsageListResponse = serviceUsageListResponseComposite & {
  headers: Headers
}

export const getServiceUsageListUrl = () => {
  return `/api/v2/service_usage/`
}

export const serviceUsageList = async (options?: RequestInit): Promise<serviceUsageListResponse> => {
  return fetchWithAuth<serviceUsageListResponse>(getServiceUsageListUrl(), {
    ...options,
    method: 'GET',
  })
}

export const getServiceUsageListQueryKey = () => {
  return ['api', 'v2', 'service_usage'] as const
}

export const getServiceUsageListQueryOptions = <
  TData = Awaited<ReturnType<typeof serviceUsageList>>,
  TError = ErrorDetail,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof serviceUsageList>>, TError, TData>
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getServiceUsageListQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof serviceUsageList>>> = ({ signal }) =>
    serviceUsageList({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof serviceUsageList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ServiceUsageListQueryResult = NonNullable<Awaited<ReturnType<typeof serviceUsageList>>>
export type ServiceUsageListQueryError = ErrorDetail

export function useServiceUsageList<
  TData = Awaited<ReturnType<typeof serviceUsageList>>,
  TError = ErrorDetail,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof serviceUsageList>>, TError, TData>
  request?: SecondParameter<typeof fetchWithAuth>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getServiceUsageListQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
