/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { MemberListResponse } from '../models/memberListResponse'

import type { OrganizationsMembersListParams } from '../models/organizationsMembersListParams'

import type { PaginatedMemberListResponseList } from '../models/paginatedMemberListResponseList'

import type { PatchedMemberPatchRequest } from '../models/patchedMemberPatchRequest'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List Members

Retrieves all members in the specified organization.

 */
export type organizationsMembersListResponse200 = {
  data: PaginatedMemberListResponseList
  status: 200
}

export type organizationsMembersListResponse404 = {
  data: ErrorDetail
  status: 404
}

export type organizationsMembersListResponseComposite =
  | organizationsMembersListResponse200
  | organizationsMembersListResponse404

export type organizationsMembersListResponse = organizationsMembersListResponseComposite & {
  headers: Headers
}

export const getOrganizationsMembersListUrl = (organizationId: string, params?: OrganizationsMembersListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/organizations/${organizationId}/members/?${stringifiedParams}`
    : `/api/v2/organizations/${organizationId}/members/`
}

export const organizationsMembersList = async (
  organizationId: string,
  params?: OrganizationsMembersListParams,
  options?: RequestInit,
): Promise<organizationsMembersListResponse> => {
  return fetchWithAuth<organizationsMembersListResponse>(getOrganizationsMembersListUrl(organizationId, params), {
    ...options,
    method: 'GET',
  })
}

export const getOrganizationsMembersListQueryKey = (
  organizationId: string,
  params?: OrganizationsMembersListParams,
) => {
  return ['api', 'v2', 'organizations', organizationId, 'members', ...(params ? [params] : [])] as const
}

export const getOrganizationsMembersListQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationsMembersList>>,
  TError = ErrorDetail,
>(
  organizationId: string,
  params?: OrganizationsMembersListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsMembersList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOrganizationsMembersListQueryKey(organizationId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsMembersList>>> = ({ signal }) =>
    organizationsMembersList(organizationId, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!organizationId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationsMembersList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type OrganizationsMembersListQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsMembersList>>>
export type OrganizationsMembersListQueryError = ErrorDetail

export function useOrganizationsMembersList<
  TData = Awaited<ReturnType<typeof organizationsMembersList>>,
  TError = ErrorDetail,
>(
  organizationId: string,
  params?: OrganizationsMembersListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsMembersList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsMembersListQueryOptions(organizationId, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve Member Details

Retrieves the details of a specific member within an organization by username.

 */
export type organizationsMembersRetrieveResponse200 = {
  data: MemberListResponse
  status: 200
}

export type organizationsMembersRetrieveResponse404 = {
  data: ErrorDetail
  status: 404
}

export type organizationsMembersRetrieveResponseComposite =
  | organizationsMembersRetrieveResponse200
  | organizationsMembersRetrieveResponse404

export type organizationsMembersRetrieveResponse = organizationsMembersRetrieveResponseComposite & {
  headers: Headers
}

export const getOrganizationsMembersRetrieveUrl = (organizationId: string, userUsername: string) => {
  return `/api/v2/organizations/${organizationId}/members/${userUsername}/`
}

export const organizationsMembersRetrieve = async (
  organizationId: string,
  userUsername: string,
  options?: RequestInit,
): Promise<organizationsMembersRetrieveResponse> => {
  return fetchWithAuth<organizationsMembersRetrieveResponse>(
    getOrganizationsMembersRetrieveUrl(organizationId, userUsername),
    {
      ...options,
      method: 'GET',
    },
  )
}

export const getOrganizationsMembersRetrieveQueryKey = (organizationId: string, userUsername: string) => {
  return ['api', 'v2', 'organizations', organizationId, 'members', userUsername] as const
}

export const getOrganizationsMembersRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof organizationsMembersRetrieve>>,
  TError = ErrorDetail,
>(
  organizationId: string,
  userUsername: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsMembersRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOrganizationsMembersRetrieveQueryKey(organizationId, userUsername)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsMembersRetrieve>>> = ({ signal }) =>
    organizationsMembersRetrieve(organizationId, userUsername, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!(organizationId && userUsername), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof organizationsMembersRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type OrganizationsMembersRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof organizationsMembersRetrieve>>
>
export type OrganizationsMembersRetrieveQueryError = ErrorDetail

export function useOrganizationsMembersRetrieve<
  TData = Awaited<ReturnType<typeof organizationsMembersRetrieve>>,
  TError = ErrorDetail,
>(
  organizationId: string,
  userUsername: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof organizationsMembersRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getOrganizationsMembersRetrieveQueryOptions(organizationId, userUsername, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Update Member Role

Updates the role of a member within the organization to `admin` or
`member`.

- **admin**: Grants the member admin privileges within the organization
- **member**: Revokes admin privileges, setting the member as a regular user

 */
export type organizationsMembersPartialUpdateResponse200 = {
  data: MemberListResponse
  status: 200
}

export type organizationsMembersPartialUpdateResponse400 = {
  data: ErrorObject
  status: 400
}

export type organizationsMembersPartialUpdateResponse403 = {
  data: ErrorDetail
  status: 403
}

export type organizationsMembersPartialUpdateResponseComposite =
  | organizationsMembersPartialUpdateResponse200
  | organizationsMembersPartialUpdateResponse400
  | organizationsMembersPartialUpdateResponse403

export type organizationsMembersPartialUpdateResponse = organizationsMembersPartialUpdateResponseComposite & {
  headers: Headers
}

export const getOrganizationsMembersPartialUpdateUrl = (organizationId: string, userUsername: string) => {
  return `/api/v2/organizations/${organizationId}/members/${userUsername}/`
}

export const organizationsMembersPartialUpdate = async (
  organizationId: string,
  userUsername: string,
  patchedMemberPatchRequest: PatchedMemberPatchRequest,
  options?: RequestInit,
): Promise<organizationsMembersPartialUpdateResponse> => {
  return fetchWithAuth<organizationsMembersPartialUpdateResponse>(
    getOrganizationsMembersPartialUpdateUrl(organizationId, userUsername),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(patchedMemberPatchRequest),
    },
  )
}

export const getOrganizationsMembersPartialUpdateMutationOptions = <
  TError = ErrorObject | ErrorDetail,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsMembersPartialUpdate>>,
    TError,
    { organizationId: string; userUsername: string; data: PatchedMemberPatchRequest },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizationsMembersPartialUpdate>>,
  TError,
  { organizationId: string; userUsername: string; data: PatchedMemberPatchRequest },
  TContext
> => {
  const mutationKey = ['organizationsMembersPartialUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizationsMembersPartialUpdate>>,
    { organizationId: string; userUsername: string; data: PatchedMemberPatchRequest }
  > = (props) => {
    const { organizationId, userUsername, data } = props ?? {}

    return organizationsMembersPartialUpdate(organizationId, userUsername, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsMembersPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizationsMembersPartialUpdate>>
>
export type OrganizationsMembersPartialUpdateMutationBody = PatchedMemberPatchRequest
export type OrganizationsMembersPartialUpdateMutationError = ErrorObject | ErrorDetail

export const useOrganizationsMembersPartialUpdate = <TError = ErrorObject | ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsMembersPartialUpdate>>,
    TError,
    { organizationId: string; userUsername: string; data: PatchedMemberPatchRequest },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getOrganizationsMembersPartialUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Remove Member

Delete an organization member.

 */
export type organizationsMembersDestroyResponse204 = {
  data: void
  status: 204
}

export type organizationsMembersDestroyResponse403 = {
  data: ErrorDetail
  status: 403
}

export type organizationsMembersDestroyResponseComposite =
  | organizationsMembersDestroyResponse204
  | organizationsMembersDestroyResponse403

export type organizationsMembersDestroyResponse = organizationsMembersDestroyResponseComposite & {
  headers: Headers
}

export const getOrganizationsMembersDestroyUrl = (organizationId: string, userUsername: string) => {
  return `/api/v2/organizations/${organizationId}/members/${userUsername}/`
}

export const organizationsMembersDestroy = async (
  organizationId: string,
  userUsername: string,
  options?: RequestInit,
): Promise<organizationsMembersDestroyResponse> => {
  return fetchWithAuth<organizationsMembersDestroyResponse>(
    getOrganizationsMembersDestroyUrl(organizationId, userUsername),
    {
      ...options,
      method: 'DELETE',
    },
  )
}

export const getOrganizationsMembersDestroyMutationOptions = <TError = ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsMembersDestroy>>,
    TError,
    { organizationId: string; userUsername: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof organizationsMembersDestroy>>,
  TError,
  { organizationId: string; userUsername: string },
  TContext
> => {
  const mutationKey = ['organizationsMembersDestroy']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof organizationsMembersDestroy>>,
    { organizationId: string; userUsername: string }
  > = (props) => {
    const { organizationId, userUsername } = props ?? {}

    return organizationsMembersDestroy(organizationId, userUsername, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type OrganizationsMembersDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof organizationsMembersDestroy>>
>

export type OrganizationsMembersDestroyMutationError = ErrorDetail

export const useOrganizationsMembersDestroy = <TError = ErrorDetail, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof organizationsMembersDestroy>>,
    TError,
    { organizationId: string; userUsername: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getOrganizationsMembersDestroyMutationOptions(options)

  return useMutation(mutationOptions)
}
