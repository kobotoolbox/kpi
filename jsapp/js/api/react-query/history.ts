/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { AssetsHistoryListParams } from '../models/assetsHistoryListParams'

import type { ErrorDetail } from '../models/errorDetail'

import type { ErrorObject } from '../models/errorObject'

import type { HistoryActionResponse } from '../models/historyActionResponse'

import type { HistoryExportResponse } from '../models/historyExportResponse'

import type { PaginatedHistoryListResponseList } from '../models/paginatedHistoryListResponseList'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List project history logs

Lists all project history logs for a single project.

‚ö†Ô∏è _Required permissions: `manage_asset` (Manage project)_

Results from this endpoint can be filtered by a Boolean query specified in the `q` parameter.

### Filterable fields for all project history logs:

  - date_created
  - user_uid
  - user__username
  - user__email
  - user__is_superuser
  - metadata__source
  - metadata__ip_address
  - metadata__log_subtype
    - available subtypes: "project", "permission"

### action

available actions:
  - add-media
  - add-submission
  - allow-anonymous-submissions
  - archive
  - clone-permissions
  - connect-project
  - delete-media
  - delete-service
  - delete-submission
  - deploy
  - disable-sharing
  - disallow-anonymous-submissions
  - disconnect-project
  - enable-sharing
  - export
  - modify-imported-fields
  - modify-qa-data
  - modify-service
  - modify-sharing
  - modify-submission
  - modify-user-permissions
  - redeploy
   - register-service
  - replace-form
  - share-data-publicly
  - share-form-publicly
  - transfer
  - unarchive
  - unshare-data-publicly
  - unshare-form-publicly
  - update-content
  - update-name
  - update-settings
  - update-qa

### Filterable fields by action:

  add-media
  - metadata__asset-file__uid
  - metadata__asset-file__filename

  add-submission
  - metadata__submission__submitted_by
  - metadata__submission__root_uuid

  archive
  - metadata__latest_version_uid

  clone-permissions
  - metadata__cloned_from

  connect-project
  - metadata__paired-data__source_uid
  - metadata__paired-data__source_name

  delete-media
  - metadata__asset-file__uid
  - metadata__asset-file__filename

  delete-service
  - metadata__hook__uid
  - metadata__hook__endpoint
  - metadata__hook__active

  delete-submission
  - metadata__submission__submitted_by
  - metadata__submission__root_uuid

  deploy
  - metadata__latest_version_uid
  - metadata__latest_deployed_version_uid

  disconnect-project
  - metadata__paired-data__source_uid
  - metadata__paired-data__source_name

  modify-imported-fields
  - metadata__paired-data__source_uid
  - metadata__paired-data__source_name

  modify-qa-data
  - metadata__submission__submitted_by
  - metadata__submission__root_uuid

  modify-service
  - metadata__hook__uid
  - metadata__hook__endpoint
  - metadata__hook__active

  modify-submission
  - metadata__submission__submitted_by
  - metadata__submission__root_uuid
  - metadata__submission__status (only present if changed)

  modify-user-permissions
  - metadata__permissions__username

  redeploy
  - metadata__latest_version_uid
  - metadata__latest_deployed_version_uid

  register-service
  - metadata__hook__uid
  - metadata__hook__endpoint
  - metadata__hook__active

  transfer
  - metadata__username

  unarchive
  - metadata__latest_version_uid

  update-name
  - metadata__name__old
  - metadata__name__new

  update-settings
  - metadata__settings__description__old
  - metadata__settings__description__new

This endpoint can be paginated with 'offset' and 'limit' parameters.

 */
export type assetsHistoryListResponse200 = {
  data: PaginatedHistoryListResponseList
  status: 200
}

export type assetsHistoryListResponse403 = {
  data: ErrorDetail
  status: 403
}

export type assetsHistoryListResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetsHistoryListResponseComposite =
  | assetsHistoryListResponse200
  | assetsHistoryListResponse403
  | assetsHistoryListResponse404

export type assetsHistoryListResponse = assetsHistoryListResponseComposite & {
  headers: Headers
}

export const getAssetsHistoryListUrl = (parentLookupAsset: string, params?: AssetsHistoryListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/assets/${parentLookupAsset}/history/?${stringifiedParams}`
    : `/api/v2/assets/${parentLookupAsset}/history/`
}

export const assetsHistoryList = async (
  parentLookupAsset: string,
  params?: AssetsHistoryListParams,
  options?: RequestInit,
): Promise<assetsHistoryListResponse> => {
  return fetchWithAuth<assetsHistoryListResponse>(getAssetsHistoryListUrl(parentLookupAsset, params), {
    ...options,
    method: 'GET',
  })
}

export const getAssetsHistoryListQueryKey = (parentLookupAsset: string, params?: AssetsHistoryListParams) => {
  return ['api', 'v2', 'assets', parentLookupAsset, 'history', ...(params ? [params] : [])] as const
}

export const getAssetsHistoryListQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsHistoryList>>,
  TError = ErrorDetail | ErrorObject,
>(
  parentLookupAsset: string,
  params?: AssetsHistoryListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsHistoryList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetsHistoryListQueryKey(parentLookupAsset, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsHistoryList>>> = ({ signal }) =>
    assetsHistoryList(parentLookupAsset, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!parentLookupAsset, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsHistoryList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsHistoryListQueryResult = NonNullable<Awaited<ReturnType<typeof assetsHistoryList>>>
export type AssetsHistoryListQueryError = ErrorDetail | ErrorObject

export function useAssetsHistoryList<
  TData = Awaited<ReturnType<typeof assetsHistoryList>>,
  TError = ErrorDetail | ErrorObject,
>(
  parentLookupAsset: string,
  params?: AssetsHistoryListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsHistoryList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsHistoryListQueryOptions(parentLookupAsset, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve distinct actions performed on the project.

 */
export type assetsHistoryActionsRetrieveResponse200 = {
  data: HistoryActionResponse
  status: 200
}

export type assetsHistoryActionsRetrieveResponse403 = {
  data: ErrorDetail
  status: 403
}

export type assetsHistoryActionsRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetsHistoryActionsRetrieveResponseComposite =
  | assetsHistoryActionsRetrieveResponse200
  | assetsHistoryActionsRetrieveResponse403
  | assetsHistoryActionsRetrieveResponse404

export type assetsHistoryActionsRetrieveResponse = assetsHistoryActionsRetrieveResponseComposite & {
  headers: Headers
}

export const getAssetsHistoryActionsRetrieveUrl = (parentLookupAsset: string) => {
  return `/api/v2/assets/${parentLookupAsset}/history/actions/`
}

export const assetsHistoryActionsRetrieve = async (
  parentLookupAsset: string,
  options?: RequestInit,
): Promise<assetsHistoryActionsRetrieveResponse> => {
  return fetchWithAuth<assetsHistoryActionsRetrieveResponse>(getAssetsHistoryActionsRetrieveUrl(parentLookupAsset), {
    ...options,
    method: 'GET',
  })
}

export const getAssetsHistoryActionsRetrieveQueryKey = (parentLookupAsset: string) => {
  return ['api', 'v2', 'assets', parentLookupAsset, 'history', 'actions'] as const
}

export const getAssetsHistoryActionsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsHistoryActionsRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  parentLookupAsset: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsHistoryActionsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetsHistoryActionsRetrieveQueryKey(parentLookupAsset)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsHistoryActionsRetrieve>>> = ({ signal }) =>
    assetsHistoryActionsRetrieve(parentLookupAsset, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!parentLookupAsset, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsHistoryActionsRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsHistoryActionsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsHistoryActionsRetrieve>>
>
export type AssetsHistoryActionsRetrieveQueryError = ErrorDetail | ErrorObject

export function useAssetsHistoryActionsRetrieve<
  TData = Awaited<ReturnType<typeof assetsHistoryActionsRetrieve>>,
  TError = ErrorDetail | ErrorObject,
>(
  parentLookupAsset: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsHistoryActionsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsHistoryActionsRetrieveQueryOptions(parentLookupAsset, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Export current project's history

Exports the project's history and sends it by email to the requesting user.

 */
export type assetsHistoryExportCreateResponse202 = {
  data: HistoryExportResponse
  status: 202
}

export type assetsHistoryExportCreateResponse403 = {
  data: ErrorDetail
  status: 403
}

export type assetsHistoryExportCreateResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetsHistoryExportCreateResponseComposite =
  | assetsHistoryExportCreateResponse202
  | assetsHistoryExportCreateResponse403
  | assetsHistoryExportCreateResponse404

export type assetsHistoryExportCreateResponse = assetsHistoryExportCreateResponseComposite & {
  headers: Headers
}

export const getAssetsHistoryExportCreateUrl = (parentLookupAsset: string) => {
  return `/api/v2/assets/${parentLookupAsset}/history/export/`
}

export const assetsHistoryExportCreate = async (
  parentLookupAsset: string,
  options?: RequestInit,
): Promise<assetsHistoryExportCreateResponse> => {
  return fetchWithAuth<assetsHistoryExportCreateResponse>(getAssetsHistoryExportCreateUrl(parentLookupAsset), {
    ...options,
    method: 'POST',
  })
}

export const getAssetsHistoryExportCreateMutationOptions = <
  TError = ErrorDetail | ErrorObject,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsHistoryExportCreate>>,
    TError,
    { parentLookupAsset: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsHistoryExportCreate>>,
  TError,
  { parentLookupAsset: string },
  TContext
> => {
  const mutationKey = ['assetsHistoryExportCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsHistoryExportCreate>>,
    { parentLookupAsset: string }
  > = (props) => {
    const { parentLookupAsset } = props ?? {}

    return assetsHistoryExportCreate(parentLookupAsset, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetsHistoryExportCreateMutationResult = NonNullable<Awaited<ReturnType<typeof assetsHistoryExportCreate>>>

export type AssetsHistoryExportCreateMutationError = ErrorDetail | ErrorObject

export const useAssetsHistoryExportCreate = <TError = ErrorDetail | ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsHistoryExportCreate>>,
    TError,
    { parentLookupAsset: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetsHistoryExportCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
