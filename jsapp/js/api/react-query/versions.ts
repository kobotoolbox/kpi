/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { AssetsVersionsListParams } from '../models/assetsVersionsListParams'

import type { ErrorDetail } from '../models/errorDetail'

import type { PaginatedVersionListResponseList } from '../models/paginatedVersionListResponseList'

import type { VersionRetrieveResponse } from '../models/versionRetrieveResponse'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List the versions of forms

 */
export type assetsVersionsListResponse200 = {
  data: PaginatedVersionListResponseList
  status: 200
}

export type assetsVersionsListResponse404 = {
  data: ErrorDetail
  status: 404
}

export type assetsVersionsListResponseComposite = assetsVersionsListResponse200 | assetsVersionsListResponse404

export type assetsVersionsListResponse = assetsVersionsListResponseComposite & {
  headers: Headers
}

export const getAssetsVersionsListUrl = (parentLookupAsset: string, params?: AssetsVersionsListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/assets/${parentLookupAsset}/versions/?${stringifiedParams}`
    : `/api/v2/assets/${parentLookupAsset}/versions/`
}

export const assetsVersionsList = async (
  parentLookupAsset: string,
  params?: AssetsVersionsListParams,
  options?: RequestInit,
): Promise<assetsVersionsListResponse> => {
  return fetchWithAuth<assetsVersionsListResponse>(getAssetsVersionsListUrl(parentLookupAsset, params), {
    ...options,
    method: 'GET',
  })
}

export const getAssetsVersionsListQueryKey = (parentLookupAsset: string, params?: AssetsVersionsListParams) => {
  return ['api', 'v2', 'assets', parentLookupAsset, 'versions', ...(params ? [params] : [])] as const
}

export const getAssetsVersionsListQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsVersionsList>>,
  TError = ErrorDetail,
>(
  parentLookupAsset: string,
  params?: AssetsVersionsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsVersionsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetsVersionsListQueryKey(parentLookupAsset, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsVersionsList>>> = ({ signal }) =>
    assetsVersionsList(parentLookupAsset, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!parentLookupAsset, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsVersionsList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsVersionsListQueryResult = NonNullable<Awaited<ReturnType<typeof assetsVersionsList>>>
export type AssetsVersionsListQueryError = ErrorDetail

export function useAssetsVersionsList<TData = Awaited<ReturnType<typeof assetsVersionsList>>, TError = ErrorDetail>(
  parentLookupAsset: string,
  params?: AssetsVersionsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsVersionsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsVersionsListQueryOptions(parentLookupAsset, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve asset versions

Returns the details of an asset version

 */
export type assetsVersionsRetrieveResponse200 = {
  data: VersionRetrieveResponse
  status: 200
}

export type assetsVersionsRetrieveResponse404 = {
  data: ErrorDetail
  status: 404
}

export type assetsVersionsRetrieveResponseComposite =
  | assetsVersionsRetrieveResponse200
  | assetsVersionsRetrieveResponse404

export type assetsVersionsRetrieveResponse = assetsVersionsRetrieveResponseComposite & {
  headers: Headers
}

export const getAssetsVersionsRetrieveUrl = (parentLookupAsset: string, uid: string) => {
  return `/api/v2/assets/${parentLookupAsset}/versions/${uid}/`
}

export const assetsVersionsRetrieve = async (
  parentLookupAsset: string,
  uid: string,
  options?: RequestInit,
): Promise<assetsVersionsRetrieveResponse> => {
  return fetchWithAuth<assetsVersionsRetrieveResponse>(getAssetsVersionsRetrieveUrl(parentLookupAsset, uid), {
    ...options,
    method: 'GET',
  })
}

export const getAssetsVersionsRetrieveQueryKey = (parentLookupAsset: string, uid: string) => {
  return ['api', 'v2', 'assets', parentLookupAsset, 'versions', uid] as const
}

export const getAssetsVersionsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsVersionsRetrieve>>,
  TError = ErrorDetail,
>(
  parentLookupAsset: string,
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsVersionsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetsVersionsRetrieveQueryKey(parentLookupAsset, uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsVersionsRetrieve>>> = ({ signal }) =>
    assetsVersionsRetrieve(parentLookupAsset, uid, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!(parentLookupAsset && uid), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsVersionsRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsVersionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof assetsVersionsRetrieve>>>
export type AssetsVersionsRetrieveQueryError = ErrorDetail

export function useAssetsVersionsRetrieve<
  TData = Awaited<ReturnType<typeof assetsVersionsRetrieve>>,
  TError = ErrorDetail,
>(
  parentLookupAsset: string,
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsVersionsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsVersionsRetrieveQueryOptions(parentLookupAsset, uid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
