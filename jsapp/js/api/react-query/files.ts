/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { AssetsFilesListParams } from '../models/assetsFilesListParams'

import type { CreateFilePayload } from '../models/createFilePayload'

import type { ErrorObject } from '../models/errorObject'

import type { FilesResponse } from '../models/filesResponse'

import type { PaginatedFilesResponseList } from '../models/paginatedFilesResponseList'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## Retrieve current asset files

Results can be narrowed down with a filter by type:
```shell
curl -X GET https://kf.kobotoolbox.org/api/v2/assets/aSAvYreNzVEkrWg5Gdcvg/files/?collections_first=true&ordering=-name
```

 */
export type assetsFilesListResponse200 = {
  data: PaginatedFilesResponseList
  status: 200
}

export type assetsFilesListResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetsFilesListResponseComposite = assetsFilesListResponse200 | assetsFilesListResponse404

export type assetsFilesListResponse = assetsFilesListResponseComposite & {
  headers: Headers
}

export const getAssetsFilesListUrl = (parentLookupAsset: string, params?: AssetsFilesListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/assets/${parentLookupAsset}/files/?${stringifiedParams}`
    : `/api/v2/assets/${parentLookupAsset}/files/`
}

export const assetsFilesList = async (
  parentLookupAsset: string,
  params?: AssetsFilesListParams,
  options?: RequestInit,
): Promise<assetsFilesListResponse> => {
  return fetchWithAuth<assetsFilesListResponse>(getAssetsFilesListUrl(parentLookupAsset, params), {
    ...options,
    method: 'GET',
  })
}

export const getAssetsFilesListQueryKey = (parentLookupAsset: string, params?: AssetsFilesListParams) => {
  return ['api', 'v2', 'assets', parentLookupAsset, 'files', ...(params ? [params] : [])] as const
}

export const getAssetsFilesListQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsFilesList>>,
  TError = ErrorObject,
>(
  parentLookupAsset: string,
  params?: AssetsFilesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsFilesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetsFilesListQueryKey(parentLookupAsset, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsFilesList>>> = ({ signal }) =>
    assetsFilesList(parentLookupAsset, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!parentLookupAsset, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsFilesList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsFilesListQueryResult = NonNullable<Awaited<ReturnType<typeof assetsFilesList>>>
export type AssetsFilesListQueryError = ErrorObject

export function useAssetsFilesList<TData = Awaited<ReturnType<typeof assetsFilesList>>, TError = ErrorObject>(
  parentLookupAsset: string,
  params?: AssetsFilesListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsFilesList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsFilesListQueryOptions(parentLookupAsset, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Create a new file on current asset

Fields:

- `asset` (required)
- `user` (required)
- `description` (required)
- `file_type` (required)
- `content` (as binary) (optional)
- `metadata` JSON (optional)

_Notes:_

1. Files can have different types:
    - `map_layer`
    - `form_media`
2. Files can be created with three different ways
    - `POST` a file with `content` parameter
    - `POST` a base64 encoded string with `base64Encoded` parameter<sup>1</sup>
    - `POST` an URL with `metadata` parameter<sup>2</sup>

<sup>1)</sup> `metadata` becomes mandatory and must contain `filename` property<br>
<sup>2)</sup> `metadata` becomes mandatory and must contain `redirect_url` property

**Files with `form_media` type must have unique `filename` per asset**

 */
export type assetsFilesCreateResponse201 = {
  data: FilesResponse
  status: 201
}

export type assetsFilesCreateResponse400 = {
  data: ErrorObject
  status: 400
}

export type assetsFilesCreateResponseComposite = assetsFilesCreateResponse201 | assetsFilesCreateResponse400

export type assetsFilesCreateResponse = assetsFilesCreateResponseComposite & {
  headers: Headers
}

export const getAssetsFilesCreateUrl = (parentLookupAsset: string) => {
  return `/api/v2/assets/${parentLookupAsset}/files/`
}

export const assetsFilesCreate = async (
  parentLookupAsset: string,
  createFilePayload: CreateFilePayload,
  options?: RequestInit,
): Promise<assetsFilesCreateResponse> => {
  return fetchWithAuth<assetsFilesCreateResponse>(getAssetsFilesCreateUrl(parentLookupAsset), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createFilePayload),
  })
}

export const getAssetsFilesCreateMutationOptions = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsFilesCreate>>,
    TError,
    { parentLookupAsset: string; data: CreateFilePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsFilesCreate>>,
  TError,
  { parentLookupAsset: string; data: CreateFilePayload },
  TContext
> => {
  const mutationKey = ['assetsFilesCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsFilesCreate>>,
    { parentLookupAsset: string; data: CreateFilePayload }
  > = (props) => {
    const { parentLookupAsset, data } = props ?? {}

    return assetsFilesCreate(parentLookupAsset, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetsFilesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof assetsFilesCreate>>>
export type AssetsFilesCreateMutationBody = CreateFilePayload
export type AssetsFilesCreateMutationError = ErrorObject

export const useAssetsFilesCreate = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsFilesCreate>>,
    TError,
    { parentLookupAsset: string; data: CreateFilePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetsFilesCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Retrieve a file from current asset

 */
export type assetsFilesRetrieveResponse200 = {
  data: FilesResponse
  status: 200
}

export type assetsFilesRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetsFilesRetrieveResponseComposite = assetsFilesRetrieveResponse200 | assetsFilesRetrieveResponse404

export type assetsFilesRetrieveResponse = assetsFilesRetrieveResponseComposite & {
  headers: Headers
}

export const getAssetsFilesRetrieveUrl = (parentLookupAsset: string, uid: string) => {
  return `/api/v2/assets/${parentLookupAsset}/files/${uid}/`
}

export const assetsFilesRetrieve = async (
  parentLookupAsset: string,
  uid: string,
  options?: RequestInit,
): Promise<assetsFilesRetrieveResponse> => {
  return fetchWithAuth<assetsFilesRetrieveResponse>(getAssetsFilesRetrieveUrl(parentLookupAsset, uid), {
    ...options,
    method: 'GET',
  })
}

export const getAssetsFilesRetrieveQueryKey = (parentLookupAsset: string, uid: string) => {
  return ['api', 'v2', 'assets', parentLookupAsset, 'files', uid] as const
}

export const getAssetsFilesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsFilesRetrieve>>,
  TError = ErrorObject,
>(
  parentLookupAsset: string,
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsFilesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetsFilesRetrieveQueryKey(parentLookupAsset, uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsFilesRetrieve>>> = ({ signal }) =>
    assetsFilesRetrieve(parentLookupAsset, uid, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!(parentLookupAsset && uid), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsFilesRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsFilesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof assetsFilesRetrieve>>>
export type AssetsFilesRetrieveQueryError = ErrorObject

export function useAssetsFilesRetrieve<TData = Awaited<ReturnType<typeof assetsFilesRetrieve>>, TError = ErrorObject>(
  parentLookupAsset: string,
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsFilesRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsFilesRetrieveQueryOptions(parentLookupAsset, uid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Delete a file from current asset

 */
export type assetsFilesDestroyResponse204 = {
  data: void
  status: 204
}

export type assetsFilesDestroyResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetsFilesDestroyResponseComposite = assetsFilesDestroyResponse204 | assetsFilesDestroyResponse404

export type assetsFilesDestroyResponse = assetsFilesDestroyResponseComposite & {
  headers: Headers
}

export const getAssetsFilesDestroyUrl = (parentLookupAsset: string, uid: string) => {
  return `/api/v2/assets/${parentLookupAsset}/files/${uid}/`
}

export const assetsFilesDestroy = async (
  parentLookupAsset: string,
  uid: string,
  options?: RequestInit,
): Promise<assetsFilesDestroyResponse> => {
  return fetchWithAuth<assetsFilesDestroyResponse>(getAssetsFilesDestroyUrl(parentLookupAsset, uid), {
    ...options,
    method: 'DELETE',
  })
}

export const getAssetsFilesDestroyMutationOptions = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsFilesDestroy>>,
    TError,
    { parentLookupAsset: string; uid: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsFilesDestroy>>,
  TError,
  { parentLookupAsset: string; uid: string },
  TContext
> => {
  const mutationKey = ['assetsFilesDestroy']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsFilesDestroy>>,
    { parentLookupAsset: string; uid: string }
  > = (props) => {
    const { parentLookupAsset, uid } = props ?? {}

    return assetsFilesDestroy(parentLookupAsset, uid, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetsFilesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof assetsFilesDestroy>>>

export type AssetsFilesDestroyMutationError = ErrorObject

export const useAssetsFilesDestroy = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsFilesDestroy>>,
    TError,
    { parentLookupAsset: string; uid: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetsFilesDestroyMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Download the asset file

 */
export type assetsFilesContentRetrieveResponse200 = {
  data: void
  status: 200
}

export type assetsFilesContentRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetsFilesContentRetrieveResponseComposite =
  | assetsFilesContentRetrieveResponse200
  | assetsFilesContentRetrieveResponse404

export type assetsFilesContentRetrieveResponse = assetsFilesContentRetrieveResponseComposite & {
  headers: Headers
}

export const getAssetsFilesContentRetrieveUrl = (parentLookupAsset: string, uid: string) => {
  return `/api/v2/assets/${parentLookupAsset}/files/${uid}/content/`
}

export const assetsFilesContentRetrieve = async (
  parentLookupAsset: string,
  uid: string,
  options?: RequestInit,
): Promise<assetsFilesContentRetrieveResponse> => {
  return fetchWithAuth<assetsFilesContentRetrieveResponse>(getAssetsFilesContentRetrieveUrl(parentLookupAsset, uid), {
    ...options,
    method: 'GET',
  })
}

export const getAssetsFilesContentRetrieveQueryKey = (parentLookupAsset: string, uid: string) => {
  return ['api', 'v2', 'assets', parentLookupAsset, 'files', uid, 'content'] as const
}

export const getAssetsFilesContentRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsFilesContentRetrieve>>,
  TError = ErrorObject,
>(
  parentLookupAsset: string,
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsFilesContentRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetsFilesContentRetrieveQueryKey(parentLookupAsset, uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsFilesContentRetrieve>>> = ({ signal }) =>
    assetsFilesContentRetrieve(parentLookupAsset, uid, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!(parentLookupAsset && uid), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsFilesContentRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsFilesContentRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof assetsFilesContentRetrieve>>>
export type AssetsFilesContentRetrieveQueryError = ErrorObject

export function useAssetsFilesContentRetrieve<
  TData = Awaited<ReturnType<typeof assetsFilesContentRetrieve>>,
  TError = ErrorObject,
>(
  parentLookupAsset: string,
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsFilesContentRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsFilesContentRetrieveQueryOptions(parentLookupAsset, uid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
