/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { PaginatedPermissionResponseList } from '../models/paginatedPermissionResponseList'

import type { PermissionResponse } from '../models/permissionResponse'

import type { PermissionsListParams } from '../models/permissionsListParams'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List all assignable permissions for `Asset`

The `implied` property of a given permission shows which additional
permissions are automatically granted when assigning that particular
permission.

The `contradictory` property shows which permissions are removed when
assigning that particular permission.

 */
export type permissionsListResponse200 = {
  data: PaginatedPermissionResponseList
  status: 200
}

export type permissionsListResponseComposite = permissionsListResponse200

export type permissionsListResponse = permissionsListResponseComposite & {
  headers: Headers
}

export const getPermissionsListUrl = (params?: PermissionsListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ? `/api/v2/permissions/?${stringifiedParams}` : `/api/v2/permissions/`
}

export const permissionsList = async (
  params?: PermissionsListParams,
  options?: RequestInit,
): Promise<permissionsListResponse> => {
  return fetchWithAuth<permissionsListResponse>(getPermissionsListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getPermissionsListQueryKey = (params?: PermissionsListParams) => {
  return ['api', 'v2', 'permissions', ...(params ? [params] : [])] as const
}

export const getPermissionsListQueryOptions = <TData = Awaited<ReturnType<typeof permissionsList>>, TError = unknown>(
  params?: PermissionsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof permissionsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPermissionsListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof permissionsList>>> = ({ signal }) =>
    permissionsList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof permissionsList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type PermissionsListQueryResult = NonNullable<Awaited<ReturnType<typeof permissionsList>>>
export type PermissionsListQueryError = unknown

export function usePermissionsList<TData = Awaited<ReturnType<typeof permissionsList>>, TError = unknown>(
  params?: PermissionsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof permissionsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPermissionsListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Retrieve a codename's permissions

 */
export type permissionsRetrieveResponse200 = {
  data: PermissionResponse
  status: 200
}

export type permissionsRetrieveResponseComposite = permissionsRetrieveResponse200

export type permissionsRetrieveResponse = permissionsRetrieveResponseComposite & {
  headers: Headers
}

export const getPermissionsRetrieveUrl = (codename: string) => {
  return `/api/v2/permissions/${codename}/`
}

export const permissionsRetrieve = async (
  codename: string,
  options?: RequestInit,
): Promise<permissionsRetrieveResponse> => {
  return fetchWithAuth<permissionsRetrieveResponse>(getPermissionsRetrieveUrl(codename), {
    ...options,
    method: 'GET',
  })
}

export const getPermissionsRetrieveQueryKey = (codename: string) => {
  return ['api', 'v2', 'permissions', codename] as const
}

export const getPermissionsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof permissionsRetrieve>>,
  TError = unknown,
>(
  codename: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof permissionsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPermissionsRetrieveQueryKey(codename)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof permissionsRetrieve>>> = ({ signal }) =>
    permissionsRetrieve(codename, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!codename, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof permissionsRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type PermissionsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof permissionsRetrieve>>>
export type PermissionsRetrieveQueryError = unknown

export function usePermissionsRetrieve<TData = Awaited<ReturnType<typeof permissionsRetrieve>>, TError = unknown>(
  codename: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof permissionsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPermissionsRetrieveQueryOptions(codename, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
