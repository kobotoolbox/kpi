/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { PaginatedSubscriptionList } from '../models/paginatedSubscriptionList'

import type { StripeSubscriptionsListParams } from '../models/stripeSubscriptionsListParams'

import type { Subscription } from '../models/subscription'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export type stripeSubscriptionsListResponse200 = {
  data: PaginatedSubscriptionList
  status: 200
}

export type stripeSubscriptionsListResponse401 = {
  data: ErrorDetail
  status: 401
}

export type stripeSubscriptionsListResponseComposite =
  | stripeSubscriptionsListResponse200
  | stripeSubscriptionsListResponse401

export type stripeSubscriptionsListResponse = stripeSubscriptionsListResponseComposite & {
  headers: Headers
}

export const getStripeSubscriptionsListUrl = (params?: StripeSubscriptionsListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/stripe/subscriptions/?${stringifiedParams}`
    : `/api/v2/stripe/subscriptions/`
}

export const stripeSubscriptionsList = async (
  params?: StripeSubscriptionsListParams,
  options?: RequestInit,
): Promise<stripeSubscriptionsListResponse> => {
  return fetchWithAuth<stripeSubscriptionsListResponse>(getStripeSubscriptionsListUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getStripeSubscriptionsListQueryKey = (params?: StripeSubscriptionsListParams) => {
  return ['api', 'v2', 'stripe', 'subscriptions', ...(params ? [params] : [])] as const
}

export const getStripeSubscriptionsListQueryOptions = <
  TData = Awaited<ReturnType<typeof stripeSubscriptionsList>>,
  TError = ErrorDetail,
>(
  params?: StripeSubscriptionsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof stripeSubscriptionsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStripeSubscriptionsListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof stripeSubscriptionsList>>> = ({ signal }) =>
    stripeSubscriptionsList(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof stripeSubscriptionsList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type StripeSubscriptionsListQueryResult = NonNullable<Awaited<ReturnType<typeof stripeSubscriptionsList>>>
export type StripeSubscriptionsListQueryError = ErrorDetail

export function useStripeSubscriptionsList<
  TData = Awaited<ReturnType<typeof stripeSubscriptionsList>>,
  TError = ErrorDetail,
>(
  params?: StripeSubscriptionsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof stripeSubscriptionsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getStripeSubscriptionsListQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export type stripeSubscriptionsRetrieveResponse200 = {
  data: Subscription
  status: 200
}

export type stripeSubscriptionsRetrieveResponseComposite = stripeSubscriptionsRetrieveResponse200

export type stripeSubscriptionsRetrieveResponse = stripeSubscriptionsRetrieveResponseComposite & {
  headers: Headers
}

export const getStripeSubscriptionsRetrieveUrl = (id: string) => {
  return `/api/v2/stripe/subscriptions/${id}/`
}

export const stripeSubscriptionsRetrieve = async (
  id: string,
  options?: RequestInit,
): Promise<stripeSubscriptionsRetrieveResponse> => {
  return fetchWithAuth<stripeSubscriptionsRetrieveResponse>(getStripeSubscriptionsRetrieveUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getStripeSubscriptionsRetrieveQueryKey = (id: string) => {
  return ['api', 'v2', 'stripe', 'subscriptions', id] as const
}

export const getStripeSubscriptionsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof stripeSubscriptionsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof stripeSubscriptionsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStripeSubscriptionsRetrieveQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof stripeSubscriptionsRetrieve>>> = ({ signal }) =>
    stripeSubscriptionsRetrieve(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof stripeSubscriptionsRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type StripeSubscriptionsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof stripeSubscriptionsRetrieve>>
>
export type StripeSubscriptionsRetrieveQueryError = unknown

export function useStripeSubscriptionsRetrieve<
  TData = Awaited<ReturnType<typeof stripeSubscriptionsRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof stripeSubscriptionsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getStripeSubscriptionsRetrieveQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
