/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { AssetsExportSettingsDataRetrieveParams } from '../models/assetsExportSettingsDataRetrieveParams'

import type { AssetsExportSettingsListParams } from '../models/assetsExportSettingsListParams'

import type { ErrorObject } from '../models/errorObject'

import type { ExportSettingCreatePayload } from '../models/exportSettingCreatePayload'

import type { ExportSettingResponse } from '../models/exportSettingResponse'

import type { PaginatedExportSettingResponseList } from '../models/paginatedExportSettingResponseList'

import type { PatchedExportSettingUpdatePayload } from '../models/patchedExportSettingUpdatePayload'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## List of export settings for a specific asset

<sup>*</sup> _Required permissions: `view_submissions` (View submissions)_

 */
export type assetsExportSettingsListResponse200 = {
  data: PaginatedExportSettingResponseList
  status: 200
}

export type assetsExportSettingsListResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetsExportSettingsListResponseComposite =
  | assetsExportSettingsListResponse200
  | assetsExportSettingsListResponse404

export type assetsExportSettingsListResponse = assetsExportSettingsListResponseComposite & {
  headers: Headers
}

export const getAssetsExportSettingsListUrl = (parentLookupAsset: string, params?: AssetsExportSettingsListParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/assets/${parentLookupAsset}/export-settings/?${stringifiedParams}`
    : `/api/v2/assets/${parentLookupAsset}/export-settings/`
}

export const assetsExportSettingsList = async (
  parentLookupAsset: string,
  params?: AssetsExportSettingsListParams,
  options?: RequestInit,
): Promise<assetsExportSettingsListResponse> => {
  return fetchWithAuth<assetsExportSettingsListResponse>(getAssetsExportSettingsListUrl(parentLookupAsset, params), {
    ...options,
    method: 'GET',
  })
}

export const getAssetsExportSettingsListQueryKey = (
  parentLookupAsset: string,
  params?: AssetsExportSettingsListParams,
) => {
  return ['api', 'v2', 'assets', parentLookupAsset, 'export-settings', ...(params ? [params] : [])] as const
}

export const getAssetsExportSettingsListQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsExportSettingsList>>,
  TError = ErrorObject,
>(
  parentLookupAsset: string,
  params?: AssetsExportSettingsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsExportSettingsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetsExportSettingsListQueryKey(parentLookupAsset, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsExportSettingsList>>> = ({ signal }) =>
    assetsExportSettingsList(parentLookupAsset, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!parentLookupAsset, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsExportSettingsList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsExportSettingsListQueryResult = NonNullable<Awaited<ReturnType<typeof assetsExportSettingsList>>>
export type AssetsExportSettingsListQueryError = ErrorObject

export function useAssetsExportSettingsList<
  TData = Awaited<ReturnType<typeof assetsExportSettingsList>>,
  TError = ErrorObject,
>(
  parentLookupAsset: string,
  params?: AssetsExportSettingsListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsExportSettingsList>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsExportSettingsListQueryOptions(parentLookupAsset, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Create an export setting for an asset

<sup>*</sup> _Required permissions: `manage_asset` (Manage project)_

Where:

* `name` (required) is the name of the export setting displayed in the UI
* `export_settings` (required) is a map of defined settings containing the following valid options:
    * `fields` (optional) is an array of column names to be included in the export (including their group hierarchy). Valid inputs include:
        * An array containing any string value that matches the XML column name
        * An empty array which will result in all columns being included
        * If `fields` is not included in the `export_settings`, all columns will be included in the export
* `flatten` (optional) is a boolean value and only relevant when exporting to `geojson` format.
* `fields_from_all_versions` (required) is a boolean to specify whether fields from all form versions will be included in the export.
* `group_sep` (required) is a value used to separate the names in a hierarchy of groups. Valid inputs include:
    * Non-empty value
* `hierarchy_in_labels` (required) is a boolean to specify whether the group hierarchy will be displayed in labels
* `multiple_select` (required) is a value to specify the display of multiple-select-type responses. Valid inputs include:
    * `both`,
    * `summary`, or
    * `details`
* `type` (required) specifies the export format. Valid export formats include:
    * `csv`,
    * `geojson`,
    * `spss_labels`, or
    * `xls`
* `xls_types_as_text` (optional) is a boolean value that defaults to `false` and only affects `xls` export types.
* `include_media_url` (optional) is a boolean value that defaults to `false` and only affects `xls` and `csv` export types.
* `submission_ids` (optional) is an array of submission ids that will filter exported submissions to only the specified array of ids. Valid inputs include:
    * An array containing integer values
    * An empty array (no filtering)
* `query` (optional) is a JSON object containing a Mongo filter query for filtering exported submissions. Valid inputs include:
    * A JSON object containing a valid Mongo query
    * An empty JSON object (no filtering)

**Note that the following behaviour can be expected when specifying a value for the `multiple_select` field:**

* `summary`: Includes one column per question, with all selected choices separated by spaces;
* `details`: Expands each multiple-select question to one column per choice, with each of those columns having a binary 1 or 0 to indicate whether that choice was chosen;
* `both`: Includes the format of `summary` _and_ `details` in the export

 */
export type assetsExportSettingsCreateResponse201 = {
  data: ExportSettingResponse
  status: 201
}

export type assetsExportSettingsCreateResponse400 = {
  data: ErrorObject
  status: 400
}

export type assetsExportSettingsCreateResponseComposite =
  | assetsExportSettingsCreateResponse201
  | assetsExportSettingsCreateResponse400

export type assetsExportSettingsCreateResponse = assetsExportSettingsCreateResponseComposite & {
  headers: Headers
}

export const getAssetsExportSettingsCreateUrl = (parentLookupAsset: string) => {
  return `/api/v2/assets/${parentLookupAsset}/export-settings/`
}

export const assetsExportSettingsCreate = async (
  parentLookupAsset: string,
  exportSettingCreatePayload: ExportSettingCreatePayload,
  options?: RequestInit,
): Promise<assetsExportSettingsCreateResponse> => {
  return fetchWithAuth<assetsExportSettingsCreateResponse>(getAssetsExportSettingsCreateUrl(parentLookupAsset), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(exportSettingCreatePayload),
  })
}

export const getAssetsExportSettingsCreateMutationOptions = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsExportSettingsCreate>>,
    TError,
    { parentLookupAsset: string; data: ExportSettingCreatePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsExportSettingsCreate>>,
  TError,
  { parentLookupAsset: string; data: ExportSettingCreatePayload },
  TContext
> => {
  const mutationKey = ['assetsExportSettingsCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsExportSettingsCreate>>,
    { parentLookupAsset: string; data: ExportSettingCreatePayload }
  > = (props) => {
    const { parentLookupAsset, data } = props ?? {}

    return assetsExportSettingsCreate(parentLookupAsset, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetsExportSettingsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsExportSettingsCreate>>
>
export type AssetsExportSettingsCreateMutationBody = ExportSettingCreatePayload
export type AssetsExportSettingsCreateMutationError = ErrorObject

export const useAssetsExportSettingsCreate = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsExportSettingsCreate>>,
    TError,
    { parentLookupAsset: string; data: ExportSettingCreatePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetsExportSettingsCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Retrieve a specific export setting

<sup>*</sup> _Required permissions: `view_submissions` (View submissions)_

 */
export type assetsExportSettingsRetrieveResponse200 = {
  data: ExportSettingResponse
  status: 200
}

export type assetsExportSettingsRetrieveResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetsExportSettingsRetrieveResponseComposite =
  | assetsExportSettingsRetrieveResponse200
  | assetsExportSettingsRetrieveResponse404

export type assetsExportSettingsRetrieveResponse = assetsExportSettingsRetrieveResponseComposite & {
  headers: Headers
}

export const getAssetsExportSettingsRetrieveUrl = (parentLookupAsset: string, uid: string) => {
  return `/api/v2/assets/${parentLookupAsset}/export-settings/${uid}/`
}

export const assetsExportSettingsRetrieve = async (
  parentLookupAsset: string,
  uid: string,
  options?: RequestInit,
): Promise<assetsExportSettingsRetrieveResponse> => {
  return fetchWithAuth<assetsExportSettingsRetrieveResponse>(
    getAssetsExportSettingsRetrieveUrl(parentLookupAsset, uid),
    {
      ...options,
      method: 'GET',
    },
  )
}

export const getAssetsExportSettingsRetrieveQueryKey = (parentLookupAsset: string, uid: string) => {
  return ['api', 'v2', 'assets', parentLookupAsset, 'export-settings', uid] as const
}

export const getAssetsExportSettingsRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsExportSettingsRetrieve>>,
  TError = ErrorObject,
>(
  parentLookupAsset: string,
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsExportSettingsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetsExportSettingsRetrieveQueryKey(parentLookupAsset, uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsExportSettingsRetrieve>>> = ({ signal }) =>
    assetsExportSettingsRetrieve(parentLookupAsset, uid, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!(parentLookupAsset && uid), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsExportSettingsRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsExportSettingsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsExportSettingsRetrieve>>
>
export type AssetsExportSettingsRetrieveQueryError = ErrorObject

export function useAssetsExportSettingsRetrieve<
  TData = Awaited<ReturnType<typeof assetsExportSettingsRetrieve>>,
  TError = ErrorObject,
>(
  parentLookupAsset: string,
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsExportSettingsRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsExportSettingsRetrieveQueryOptions(parentLookupAsset, uid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ## Update the current export setting

<sup>*</sup> _Required permissions: `manage_asset` (Manage project)_

 */
export type assetsExportSettingsPartialUpdateResponse200 = {
  data: ExportSettingResponse
  status: 200
}

export type assetsExportSettingsPartialUpdateResponse400 = {
  data: ErrorObject
  status: 400
}

export type assetsExportSettingsPartialUpdateResponseComposite =
  | assetsExportSettingsPartialUpdateResponse200
  | assetsExportSettingsPartialUpdateResponse400

export type assetsExportSettingsPartialUpdateResponse = assetsExportSettingsPartialUpdateResponseComposite & {
  headers: Headers
}

export const getAssetsExportSettingsPartialUpdateUrl = (parentLookupAsset: string, uid: string) => {
  return `/api/v2/assets/${parentLookupAsset}/export-settings/${uid}/`
}

export const assetsExportSettingsPartialUpdate = async (
  parentLookupAsset: string,
  uid: string,
  patchedExportSettingUpdatePayload: PatchedExportSettingUpdatePayload,
  options?: RequestInit,
): Promise<assetsExportSettingsPartialUpdateResponse> => {
  return fetchWithAuth<assetsExportSettingsPartialUpdateResponse>(
    getAssetsExportSettingsPartialUpdateUrl(parentLookupAsset, uid),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(patchedExportSettingUpdatePayload),
    },
  )
}

export const getAssetsExportSettingsPartialUpdateMutationOptions = <
  TError = ErrorObject,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsExportSettingsPartialUpdate>>,
    TError,
    { parentLookupAsset: string; uid: string; data: PatchedExportSettingUpdatePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsExportSettingsPartialUpdate>>,
  TError,
  { parentLookupAsset: string; uid: string; data: PatchedExportSettingUpdatePayload },
  TContext
> => {
  const mutationKey = ['assetsExportSettingsPartialUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsExportSettingsPartialUpdate>>,
    { parentLookupAsset: string; uid: string; data: PatchedExportSettingUpdatePayload }
  > = (props) => {
    const { parentLookupAsset, uid, data } = props ?? {}

    return assetsExportSettingsPartialUpdate(parentLookupAsset, uid, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetsExportSettingsPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsExportSettingsPartialUpdate>>
>
export type AssetsExportSettingsPartialUpdateMutationBody = PatchedExportSettingUpdatePayload
export type AssetsExportSettingsPartialUpdateMutationError = ErrorObject

export const useAssetsExportSettingsPartialUpdate = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsExportSettingsPartialUpdate>>,
    TError,
    { parentLookupAsset: string; uid: string; data: PatchedExportSettingUpdatePayload },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetsExportSettingsPartialUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Delete current export setting

<sup>*</sup> _Required permissions: `manage_asset` (Manage project)_


 */
export type assetsExportSettingsDestroyResponse204 = {
  data: void
  status: 204
}

export type assetsExportSettingsDestroyResponse404 = {
  data: ErrorObject
  status: 404
}

export type assetsExportSettingsDestroyResponseComposite =
  | assetsExportSettingsDestroyResponse204
  | assetsExportSettingsDestroyResponse404

export type assetsExportSettingsDestroyResponse = assetsExportSettingsDestroyResponseComposite & {
  headers: Headers
}

export const getAssetsExportSettingsDestroyUrl = (parentLookupAsset: string, uid: string) => {
  return `/api/v2/assets/${parentLookupAsset}/export-settings/${uid}/`
}

export const assetsExportSettingsDestroy = async (
  parentLookupAsset: string,
  uid: string,
  options?: RequestInit,
): Promise<assetsExportSettingsDestroyResponse> => {
  return fetchWithAuth<assetsExportSettingsDestroyResponse>(getAssetsExportSettingsDestroyUrl(parentLookupAsset, uid), {
    ...options,
    method: 'DELETE',
  })
}

export const getAssetsExportSettingsDestroyMutationOptions = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsExportSettingsDestroy>>,
    TError,
    { parentLookupAsset: string; uid: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}): UseMutationOptions<
  Awaited<ReturnType<typeof assetsExportSettingsDestroy>>,
  TError,
  { parentLookupAsset: string; uid: string },
  TContext
> => {
  const mutationKey = ['assetsExportSettingsDestroy']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof assetsExportSettingsDestroy>>,
    { parentLookupAsset: string; uid: string }
  > = (props) => {
    const { parentLookupAsset, uid } = props ?? {}

    return assetsExportSettingsDestroy(parentLookupAsset, uid, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AssetsExportSettingsDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof assetsExportSettingsDestroy>>
>

export type AssetsExportSettingsDestroyMutationError = ErrorObject

export const useAssetsExportSettingsDestroy = <TError = ErrorObject, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof assetsExportSettingsDestroy>>,
    TError,
    { parentLookupAsset: string; uid: string },
    TContext
  >
  request?: SecondParameter<typeof fetchWithAuth>
}) => {
  const mutationOptions = getAssetsExportSettingsDestroyMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ## Synchronously export data

To retrieve data synchronously in CSV and XLSX format according to a
particular instance of export settings.

Processing time of synchronous exports is substantially limited compared to
asynchronous exports, which are available at `/api/v2/assets/{asset_uid}/exports/`.

 */
export type assetsExportSettingsDataRetrieveResponse200 = {
  data: void
  status: 200
}

export type assetsExportSettingsDataRetrieveResponse400 = {
  data: ErrorObject
  status: 400
}

export type assetsExportSettingsDataRetrieveResponseComposite =
  | assetsExportSettingsDataRetrieveResponse200
  | assetsExportSettingsDataRetrieveResponse400

export type assetsExportSettingsDataRetrieveResponse = assetsExportSettingsDataRetrieveResponseComposite & {
  headers: Headers
}

export const getAssetsExportSettingsDataRetrieveUrl = (
  parentLookupAsset: string,
  uid: string,
  params: AssetsExportSettingsDataRetrieveParams,
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0
    ? `/api/v2/assets/${parentLookupAsset}/export-settings/${uid}/data/?${stringifiedParams}`
    : `/api/v2/assets/${parentLookupAsset}/export-settings/${uid}/data/`
}

export const assetsExportSettingsDataRetrieve = async (
  parentLookupAsset: string,
  uid: string,
  params: AssetsExportSettingsDataRetrieveParams,
  options?: RequestInit,
): Promise<assetsExportSettingsDataRetrieveResponse> => {
  return fetchWithAuth<assetsExportSettingsDataRetrieveResponse>(
    getAssetsExportSettingsDataRetrieveUrl(parentLookupAsset, uid, params),
    {
      ...options,
      method: 'GET',
    },
  )
}

export const getAssetsExportSettingsDataRetrieveQueryKey = (
  parentLookupAsset: string,
  uid: string,
  params: AssetsExportSettingsDataRetrieveParams,
) => {
  return [
    'api',
    'v2',
    'assets',
    parentLookupAsset,
    'export-settings',
    uid,
    'data',
    ...(params ? [params] : []),
  ] as const
}

export const getAssetsExportSettingsDataRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof assetsExportSettingsDataRetrieve>>,
  TError = ErrorObject,
>(
  parentLookupAsset: string,
  uid: string,
  params: AssetsExportSettingsDataRetrieveParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsExportSettingsDataRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAssetsExportSettingsDataRetrieveQueryKey(parentLookupAsset, uid, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsExportSettingsDataRetrieve>>> = ({ signal }) =>
    assetsExportSettingsDataRetrieve(parentLookupAsset, uid, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!(parentLookupAsset && uid), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof assetsExportSettingsDataRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AssetsExportSettingsDataRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof assetsExportSettingsDataRetrieve>>
>
export type AssetsExportSettingsDataRetrieveQueryError = ErrorObject

export function useAssetsExportSettingsDataRetrieve<
  TData = Awaited<ReturnType<typeof assetsExportSettingsDataRetrieve>>,
  TError = ErrorObject,
>(
  parentLookupAsset: string,
  uid: string,
  params: AssetsExportSettingsDataRetrieveParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof assetsExportSettingsDataRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getAssetsExportSettingsDataRetrieveQueryOptions(parentLookupAsset, uid, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
