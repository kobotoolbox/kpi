/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * KoboToolbox API
 * Powerful and intuitive data collection tools to make an impact
 * OpenAPI spec version: 2.0.0 (api_v2)
 */
import { useQuery } from '@tanstack/react-query'
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from '@tanstack/react-query'

import type { ErrorDetail } from '../models/errorDetail'

import type { TransferListResponse } from '../models/transferListResponse'

import { fetchWithAuth } from '../orval.mutator'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * ## Retrieve transfer details

 */
export type projectOwnershipInvitesTransfersRetrieveResponse200 = {
  data: TransferListResponse
  status: 200
}

export type projectOwnershipInvitesTransfersRetrieveResponse401 = {
  data: ErrorDetail
  status: 401
}

export type projectOwnershipInvitesTransfersRetrieveResponseComposite =
  | projectOwnershipInvitesTransfersRetrieveResponse200
  | projectOwnershipInvitesTransfersRetrieveResponse401

export type projectOwnershipInvitesTransfersRetrieveResponse =
  projectOwnershipInvitesTransfersRetrieveResponseComposite & {
    headers: Headers
  }

export const getProjectOwnershipInvitesTransfersRetrieveUrl = (parentLookupInviteUid: string, uid: string) => {
  return `/api/v2/project-ownership/invites/${parentLookupInviteUid}/transfers/${uid}/`
}

export const projectOwnershipInvitesTransfersRetrieve = async (
  parentLookupInviteUid: string,
  uid: string,
  options?: RequestInit,
): Promise<projectOwnershipInvitesTransfersRetrieveResponse> => {
  return fetchWithAuth<projectOwnershipInvitesTransfersRetrieveResponse>(
    getProjectOwnershipInvitesTransfersRetrieveUrl(parentLookupInviteUid, uid),
    {
      ...options,
      method: 'GET',
    },
  )
}

export const getProjectOwnershipInvitesTransfersRetrieveQueryKey = (parentLookupInviteUid: string, uid: string) => {
  return ['api', 'v2', 'project-ownership', 'invites', parentLookupInviteUid, 'transfers', uid] as const
}

export const getProjectOwnershipInvitesTransfersRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof projectOwnershipInvitesTransfersRetrieve>>,
  TError = ErrorDetail,
>(
  parentLookupInviteUid: string,
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectOwnershipInvitesTransfersRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getProjectOwnershipInvitesTransfersRetrieveQueryKey(parentLookupInviteUid, uid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof projectOwnershipInvitesTransfersRetrieve>>> = ({ signal }) =>
    projectOwnershipInvitesTransfersRetrieve(parentLookupInviteUid, uid, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!(parentLookupInviteUid && uid), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof projectOwnershipInvitesTransfersRetrieve>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ProjectOwnershipInvitesTransfersRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof projectOwnershipInvitesTransfersRetrieve>>
>
export type ProjectOwnershipInvitesTransfersRetrieveQueryError = ErrorDetail

export function useProjectOwnershipInvitesTransfersRetrieve<
  TData = Awaited<ReturnType<typeof projectOwnershipInvitesTransfersRetrieve>>,
  TError = ErrorDetail,
>(
  parentLookupInviteUid: string,
  uid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof projectOwnershipInvitesTransfersRetrieve>>, TError, TData>
    request?: SecondParameter<typeof fetchWithAuth>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProjectOwnershipInvitesTransfersRetrieveQueryOptions(parentLookupInviteUid, uid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
