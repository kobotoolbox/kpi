@use 'scss/colors';
@use 'scss/mixins';

$universal-table-border-radius: 6px;

.root {
  border: 1px solid colors.$kobo-gray-200;
  border-radius: $universal-table-border-radius;
  width: 100%;
  // We set it here intentionally, so noone will think about setting it to
  // `hidden`, as it breaks some non obvious things in the table (e.g. the page
  // size dropdown in footer).
  overflow: visible;
}

// We can't use `overflow: hidden` unfortunately, and we do have rounder
// corners, so we will be smart about it and handle the corners of all four
// corner cells 8-) :shrug: Also assuming here that we always have header row.
.table .tableRow:first-of-type .tableHeaderCell:first-of-type {
  border-top-left-radius: $universal-table-border-radius;
}
.table .tableRow:last-of-type .tableHeaderCell:last-of-type {
  border-top-right-radius: $universal-table-border-radius;
}
.tableFooter {
  border-bottom-left-radius: $universal-table-border-radius;
  border-bottom-right-radius: $universal-table-border-radius;
}
.table:not(.hasFooter) .tableRow:last-of-type .tableCell:first-of-type {
  border-bottom-left-radius: $universal-table-border-radius;
}
.table:not(.hasFooter) .tableRow:last-of-type .tableCell:last-of-type {
  border-bottom-right-radius: $universal-table-border-radius;
}

.tableContainer {
  overflow-x: auto;
  position: relative;
}

.table {
  // reset table browser styles first
  margin: 0;
  padding: 0;
  background: none;
  border: none;
  border-collapse: collapse;
  border-spacing: 0;
  background-image: none;
  // the actual styles:
  background-color: colors.$kobo-white;
  // box-shadow and borders will not work with positon: sticky otherwise
  border-collapse: separate !important;
}

.tableCell {
  background-color: colors.$kobo-white;
}

.tableHeaderCell {
  background-color: colors.$kobo-gray-100;
  color: colors.$kobo-gray-700;
  position: relative;
  font-size: 12px;
  font-weight: normal;
  text-align: initial;
}

.tableRow {
  .tableCell, .tableHeaderCell {
    border-bottom: 1px solid colors.$kobo-gray-200;
  }
}

.tableCell,
.tableHeaderCell {
  padding: 12px 20px;
}

.tableCell.isPinned,
.tableHeaderCell.isPinned {
  position: sticky;
  // TODO see if this needs to be something from `z-indexes` file.
  // For sure it needs to be over .resizer
  z-index: 2;
  // react-table can handle left and right pinning, but we are only interested
  // in left pinning here
  left: 0;
  border-right: 1px solid colors.$kobo-gray-200;

  &::after {
    content: '';
    position: absolute;
    left: calc(100% + 1px);
    top: 0;
    height: 100%;
    width: 7px;
    background: linear-gradient(to right, rgba(0, 0, 0, 0.06), transparent);
  }
}

// TODO: this needs to look like 1px line, but be touchable in a much bigger area
.resizer {
  position: absolute;
  background-color: colors.$kobo-gray-200;
  height: 100%;
  width: 4px;
  right: -2px;
  top: 0;
  // TODO see if this needs to be something from `z-indexes` file
  z-index: 1;
  cursor: col-resize;
  touch-action: none;
  user-select: none;
}

.resizer:hover {
  background-color: colors.$kobo-gray-300;
}

.resizer.isResizing {
  background-color: colors.$kobo-gray-400;
}

.tableRow:not(:hover) .resizer {
  opacity: 0;
}

.tableRow:hover .resizer {
  opacity: 1;
}

// We need this to avoid having 2px empty space to the right of the last table column
.tableHeaderCell:last-child .resizer {
  right: 0;
  width: 2px;
}

.tableFooter {
  @include mixins.centerRowFlex;
  justify-content: space-between;
  background-color: colors.$kobo-gray-100;
  padding: 10px 20px;
}

.pagination {
  @include mixins.centerRowFlex;
}

.paginationNumbering {
  display: inline;
  margin: 0 15px;
}

.pageSizeSelect {
  width: auto !important;
  min-width: 120px;
}
